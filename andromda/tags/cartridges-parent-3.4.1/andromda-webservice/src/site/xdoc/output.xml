<?xml version="1.0" encoding="iso-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>AndroMDA - CXF Webservices - HowTo - Output Files</title>
        <author email="bob@andromda.org">Bob Fields</author>
    </properties>

    <body>
        <section name="Output Projects and Files">
            <p>
                Code that is generated once and not overwritten is under /src, code that is generated and overwritten 
                each time is under /target/src. There are also .ref (reference) files for artifacts that would have been
                generated if the existing file was not there. They can be used for comparison/merging purposes, i.e. if 
                a new method is added to the model and the stubbed implementation must also be added to the Impl class.
            </p>
            <p>
                Projects are generated in the following order: mda, common, core, webservice, app (if ear), CXF. 
                The process looks like:
            </p>
            <ul>
                <li>Read model(s) and generate code from andromda</li>
                <li>(mda) Run the generated webservice\<b>buildWS.xml</b> ant script, which validates and runs <b>wsdl2java</b> against each 
                generated service wsdl targeting the CXF project, and copies ObjectFactory and faults back to the common project</li>
                <li>Compiles common project</li>
                <li>Compiles core project and runs local unit tests against the service implementation delegates</li>
                <li>Compiles webservice project.</li>
                <li>(webservice) Launches <b>Jetty</b> with the generated Spring configuration. Runs integration tests 
                with in-place war project against java client. Stops Jetty.</li>
                <li>Runs <b>java2ws</b> against the common/core generated code, targeting the CXF project.
                This verifies that the java service implementation code can be used to create compatible 
                wsdl and will display the proper result when using ?wsdl URL</li>
                <li>Copies spring/web configuration from webservice project. Compiles CXF project</li>
                <li>(CXF) Launches <b>Jetty</b> with the generated Spring configuration. Runs integration tests 
                with in-place war project against java client. Stops Jetty. 
                This verifies that server and client code generated by CXF against the wsdl is valid</li>
            </ul>
            <p>
                In the initial andromdapp generated project, the mda/<b>build.xml</b> ant script deletes all of the Implementation code.
                To turn this off, once the interfaces have been sufficiently modeled,
                edit mda/pom.xml to comment out the cleanImpl task in the antrun plugin clean execution:
<source><![CDATA[
            <plugin>
              <artifactId>maven-antrun-plugin</artifactId>
              <executions>
                <!-- Clean the implementation code and WSDL code also, during mvn clean -->
                <execution>
                  <id>clean</id>
                  <phase>clean</phase>
                  <configuration>
                    <target>
                        ...
                        <ant antfile="${project.basedir}/build.xml">
                            <target name="clean"/>
                        </ant>
                        <ant antfile="${project.basedir}/build.xml">
                            <target name="cleanWSDL"/>
                        </ant>
                        <!--ant antfile="${project.basedir}/build.xml">
                            <target name="cleanImpl"/>
                        </ant-->
                    </target>
                  </configuration>
                  <goals>
                    <goal>run</goal>
                  </goals>
                </execution>
]]></source>
            </p>
        </section>
        <section name="MDA Project">
            <p>
                mda (Controls the code generation process):
            </p>
            <ul>
                <li><b>build.xml</b>: ant build script to generate code through maven and generate wsdl and java code in the CXF project.
                Created by the andromdapp initial project generation. 
                buildAll iterates through multiple models and calls build.xml tasks (Deprecated, no longer needed after multi-model code generation was fixed).</li>
                <li>src/main/config/<b>andromda.xml</b>: the master configuration for code generation. 
                Specifies model file(s), cartridges, and generation options</li>
                <li>src/main/config/mappings: Configuration files to override default mappings from UML to Java, 
                or UML to XML, configured in andromda.xml. By default we override XMLDate behavior.</li>
                <li>src/main/uml: default location for model(s) used for code generation.</li>
                <li>logs: log files are initially generated in the root directory, and copied to the logs 
                directory at the start of the next run. Logging level is changed by uncommenting the log4j.xml reference in andromda.xml.</li>
                <li>Runs the generated buildWS.xml ant script in the webservice project, which runs wsdl2java against the generated wsdl/xsd
                with output to the CXF project, and copies some files (such as ObjectFactory and *Fault) back to the common and core projects.</li>
            </ul>
            <p>
                the ant output looks something like this:
<source><![CDATA[
[INFO] [antrun:run {execution: buildWS}]
wsgenall:
     [echo] running wsgen for each generated webservice class

wsgenjava:
     [echo] running wsdlvalidator for AndroMDA generated wsdl for service CXF34Service
     [java] wsdlvalidator -verbose C:\Workspaces\cxf34\mda/../webservice/src/main/webapp/wsdl/CXF34Service.wsdl
     [java] wsdlvalidator - Apache CXF 2.3.3
     [java] 
     [java] Passed Validation : Valid WSDL 
     [echo] running wsdl2java for service CXF34Service
     [java] Loading FrontEnd jaxws ...
     [java] Loading DataBinding jaxb ...
     [java] wsdl2java -p http://services.cxf34.andromda.org/=org.andromda.cxf34.services -b C:\Workspaces\cxf34\mda/../webservice/src/main/webapp/wsdl/bindings/CXF34Service.xjb -d C:\Workspaces\cxf34\mda/../CXF/target/src/main/java -classdir C:\Workspaces\cxf34\mda/../CXF/src/main/webapp/WEB-INF/classes -all -verbose -autoNameResolution C:\Workspaces\cxf34\mda/../webservice/src/main/webapp/wsdl/CXF34Service.wsdl
     [java] wsdl2java - Apache CXF 2.3.3
     [java] 
     [copy] Copying 1 file to C:\Workspaces\cxf34\common\target\src\main\java\org\andromda\cxf34\services
     [copy] Copying C:\Workspaces\cxf34\CXF\target\src\main\java\org\andromda\cxf34\services\ObjectFactory.java to C:\Workspaces\cxf34\common\target\src\main\java\org\andromda\cxf34\services\ObjectFactory.java
     [copy] Copying 6 files to C:\Workspaces\cxf34\common\target\src\main\java
     [copy] Copying C:\Workspaces\cxf34\CXF\target\src\main\java\org\andromda\cxf34\exceptions\ObjectFactory.java to C:\Workspaces\cxf34\common\target\src\main\java\org\andromda\cxf34\exceptions\ObjectFactory.java
     [copy] Copying C:\Workspaces\cxf34\CXF\target\src\main\java\org\andromda\cxf34\valueobjects\ObjectFactory.java to C:\Workspaces\cxf34\common\target\src\main\java\org\andromda\cxf34\valueobjects\ObjectFactory.java
]]></source>
            </p>
        </section>
        <section name="Common Project">
            <p>
                common:
            </p>
            <ul>
                <li><b>ValueObjects</b></li>
                <li><b>Enumerations</b></li>
                <li><b>Exceptions</b> (including service WebFault classes)</li>
                <li>Jaxb <b>package-info</b> class: maps package name to XML namespace</li>
                <li>Jaxb <b>ObjectFactory</b>: required for XML marshall/unmarshalling</li>
                <li>Jaxb <b>Request and ResponseWrappers</b>: used to implement JAX-WS wrapped mode</li>
                <li>Jaxb Adapter (for CXF 2.0 only): used for customized bindings such as java.util.Date 
                instead of XMLGregorianCalendar, otherwise the $XML class is referenced.</li>
            </ul>
        </section>
        <section name="Core Project">
            <p>
                core (generally holds services and domain objects):
            </p>
            <ul>
                <li>Service <b>SEI</b>: The Service Endpoint Interface</li>
                <li>Service <b>SEIImpl</b>: The class which implements the SEI</li>
                <li>Service <b>SEIImplTest</b>: UnitTest for the SEIImpl:
                does not require deployment to web service container/runtime, 
                should be used to test the service implementation (not the web service configuration/transport). 
                Uses default data from <![CDATA[<Method>]]>Impl.CreateInput().</li>
                <li>Service <b>Delegate</b> (under src): The class that the SEIImpl delegates to, for each method implementation. By default, it delegates again to the <![CDATA[<Method>]]>Impl class.</li>
                <li>Service <b><![CDATA[<Method>]]>Impl</b> (under src): Contains default implementations for 
                CreateInput (input for unit test for the method), 
                transformInput (iterates through method input objects to map to an underlying implementation), 
                and TransformResponse (iterates through return type hierarchy to map implementation output to service return value).</li>
            </ul>
        </section>
        <section name="Webservice Project">
            <p>
                webservice (web application containing the service implementation):
            </p>
            <ul>
                <li><b>JettyServer</b> (under default package): Runs Jetty web server, which allows 
                easily deploying and starting the web service endpoint, for testing.</li>
                <li><b><![CDATA[<Service>]]>_WSClient</b>: Java service client which calls each web service with test data from 
                <![CDATA[<Method>]]>Impl CreateInput.</li>
                <li><b><![CDATA[<Service>]]>WSTest</b>: Uses SharedCore DataDrivenTestCase to allow Excel test input for service methods.</li>
                <li><b><![CDATA[<Service>]]>SEI_<![CDATA[<Service>]]>SEIEndpoint_Server and _Client</b>: 
                Generated by CXF wsdl2java in the 
                CXF project and copied to the webservice project, in case you might want to use the default generated Server and Client implementations.</li>
                <li>src/main/webapp/WEB-INF/<b>web.xml</b>: Web project configuration, initializes the CXF servlet and the Spring configuration</li>
                <li>src/main/webapp/WEB-INF/<b>ApplicationContext-CXF.xml</b>: Spring configuration file which 
                exposes the Service endpoints as web services. You can configure logging, schema validation, 
                cusom handlers, etc here.</li>
                <li>src/main/webapp/wsdl: Generated <b>wsdl</b> files.</li>
                <li>src/main/webapp/wsdl/xsd: Generated <b>xsd</b> schema files.</li>
                <li>src/main/webapp/wsdl/bindings: <b>jaxb_bindings</b> files used by CXF wsdl2java, 
                to customize the Endpoint names, Date/Integer/Decimal handling created in the CXF project from the generated wsdl files.</li>
                <li>src/main/webapp/wsdl/ref: <b>.ref</b> files which are regenerated each time. 
                These would have overwritten the corresponding wsdl and xsd files, can be used to compare new to existing generated code.</li>
            </ul>
        </section>
        <section name="CXF Project">
            <p>
                CXF Client: Scratch area for the results of running <b>wsdl2java</b> against the generated wsdl/xsd files, 
                and <b>java2ws</b> (java2wsdl for CXF 2.0) against the generated java code. 
                Use this to see what would be generated by WS clients using only the wsdl, 
                and to make sure the generated code in the CXF and Webservice projects is compatible. 
                This code does not need to be source controlled.
            </p>
            <ul>
                <li>src/main/webapp/WEB-INF/wsdl contains the <b>wsdl</b> files. No imported xsd files are generated because there is a bug in CXF (schemaLocation is missing).</li>
                <li>target/src/main/java contains all Java code generated from the wsdl.</li>
            </ul>
        </section>
        <section name="Next">
            <p>
                Next we will look at how to implement the services and service tests <a href="implementation.html">Implementation</a>
            </p>
        </section>
    </body>
</document>
