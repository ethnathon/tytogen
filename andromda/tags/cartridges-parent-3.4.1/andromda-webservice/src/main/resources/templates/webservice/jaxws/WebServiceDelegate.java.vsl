 #if ($umlUtils.shouldOutput($service))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA
 *
 * TEMPLATE:    jaxws/WebServiceDelegate.vsl in andromda-webservices-cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

#if ($service.restAtom)
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import java.io.StringWriter;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.logging.Level;
import org.apache.abdera.model.Entry;
import org.apache.abdera.model.Feed;
#else
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
#end

/**
 * WebService Service Endpoint Implementation delegate for the $service.name service.
$service.getDocumentation(" * ")
 */

public class ${service.name}WSDelegate
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Impl
#end
{
   #if (!$service.restAtom)//#end private static final Logger LOG = LoggerFactory.getLogger(${service.name}WSDelegate.class);
   #if (!$service.restAtom)//#end private static final String className = "${service.name}WSDelegate";

    /**
     * Constructor
     */
    public ${service.name}WSDelegate()
    {
        //Documented empty code block - avoid compiler warning
    }
#foreach ($operation in $service.allowedOperations)

#if (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
#end
#if ($operation.restAtom)

    // Static instance of JAXBContext for operation return type - JAXB performance
    private static JAXBContext ${operation.name}RtnCtx = null;

    /**
     * Get Static instance of JAXBContext for operation ${operation.name} return type - JAXB performance
     * @return ${operation.name}CtxInstance
     * @throws javax.xml.bind.JAXBException
     */
    public static synchronized JAXBContext ${operation.name}CtxInstance() throws JAXBException
    {
        if (${operation.name}RtnCtx==null)
        {
            ${operation.name}RtnCtx=JAXBContext.newInstance(${returnType}.class);
        }
        return ${operation.name}RtnCtx;
    }

#end
   /**
    * Invokes the $operation.name service method on ${service.name}.
$operation.getDocumentation("    * ")
#if ($operation.restAtom)
#set ($arguments="feed")
    * @param $arguments Abdera Feed initialized.
    * @return ${operation.operationName}Response org.apache.abdera.model.Feed Abdera Feed populated with content.
#else
#if ($service.hasStereotype("WSCustomHeader"))
#set ($serviceElementName = $service.findTaggedValue("andromda_wsdl_header_element"))
#set ($serviceNamespace = $service.findTaggedValue("andromda_header_namespace"))
#set ($serviceClassName = "${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName")
#set ($serviceParameterName = $stringUtils.uncapitalize($serviceElementName))
#end
#if ($service.hasStereotype("WSSecurity"))
#set ($securityElementName = $service.findTaggedValue("andromda_wsdl_security_element"))
#set ($securityNamespace = $service.findTaggedValue("andromda_security_namespace"))
#set ($securityClassName = "${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName")
#set ($securityParameterName = $stringUtils.uncapitalize($securityElementName))
#if ($stringUtils.isEmpty($securityNamespace))#set ($securityNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd")#end
#end
#set ($returnTypeName=$stringUtils.uncapitalize($operation.returnType.nonArray.name))
#set ($arguments="$operation.argumentNames")
#foreach ( $parameter in $operation.arguments)
    * @param $parameter.name $parameter.type.packageName $parameter.type.name multiplicity=${parameter.lower}..${parameter.upper}
#end
#if ($service.hasStereotype("WSCustomHeader"))
    * @param serviceParameterName $serviceClassName WSCustomHeader
#end
#if ($service.hasStereotype("WSSecurity"))
    * @param securityParameterName $securityClassName WSSecurity
#end
#if ($operation.returnTypePresent)
    * @return ${operation.operationName}Response $returnType
#end
#end
#foreach ( $exception in $operation.exceptions)
    * @throws $exception.fullyQualifiedName
#end
##    * @throws RemoteException if ${service.name}.${operation.name} fails
#foreach ($constraint in $operation.constraints)
    * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end ${constraint.body}
#end
    */
    $operation.visibility #if ($operation.restAtom)Feed#else$returnType#end $operation.name
    (
#set ($comma = " ")
#if ($operation.restAtom)
        Feed feed
#elseif (!$operation.arguments.empty)
##set ($parameterList="")
## If parameter.name not supplied by WebParam, it defaults to arg0, arg1 etc from wsdlgen tools
#foreach ($parameter in $operation.arguments)
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($paramType="java.util.List<$parameter.type.fullyQualifiedName>")
#else
##        // $useArrayWrapper $parameter.many $parameter.upper $parameter.upper
#set ($paramType=$parameter.getterSetterTypeName)
#end
##      ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
      ${comma} $paramType $parameter.name
##set ($parameterList = "$comma${parameter.name}$parameterList")
#set ($comma = ",")
#end
#end
#if ($service.hasStereotype("WSCustomHeader"))
      ${comma} $serviceClassName $serviceParameterName
#set ($comma = ",")
#end
#if ($service.hasStereotype("WSSecurity"))
      ${comma} $securityClassName $securityParameterName
#end
    )
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
#if ($generateMethodImpl)
        // Populate method wrapper object so all parameters can be logged and transformed at once
        // Transform input parameters to domain request object
        /*$returnType rtn =*/ ${stringUtils.capitalize($operation.operationName)}Impl.${operation.name}TransformInput(
#set ($comma = "")
#foreach ($parameter in $operation.arguments)
##      ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
            ${comma}$parameter.name
#set ($comma = ", ")
#end
#if ($service.hasStereotype("WSCustomHeader"))
            ${comma}$serviceParameterName
#set ($comma = ", ")
#end
#if ($service.hasStereotype("WSSecurity"))
            ${comma}$securityParameterName
#end
        );
#end

        //TODO: Implement service operation
#if ($generateMethodImpl)
        //throw new UnsupportedOperationException("Service ${service.name}.${operation.name} not implemented.");
#foreach ($exception in $operation.exceptions)
        /* Uncomment to test thrown exceptions from Service method
#if (!$exception.properties.empty)
#set ($faultBean=$exception.properties.get(0))
        $faultBean.getterSetterTypeName faultBean = new ${faultBean.getterSetterTypeName}();
#foreach ($property in $faultBean.allProperties)
        faultBean.${property.setterName}($webServiceUtils.createConstructor($property, false, $faultBean));
#end
        throw new $exception.fullyQualifiedName ("Service ${service.name}.${operation.name} exception $exception.fullyQualifiedName", faultBean);
#else
        // Service Exception should have a faultBean attribute modeled with exception detail properties
        throw new $exception.fullyQualifiedName ("Service ${service.name}.${operation.name} exception $exception.fullyQualifiedName");
#end
        */
#end
#if ($operation.restAtom)
        // TODO Enter values in Abdera Atom implementation code
        // See JBoss RestEasy guide and Abdera docs for examples:
        // http://www.jboss.org/resteasy/docs.html http://abdera.apache.org/
        feed.setId("tag:example.org,2007:/foo");
        feed.setTitle("Test Feed");
        feed.setSubtitle("Feed subtitle");
        feed.setUpdated(new Date());
        feed.addAuthor("Bob Fields");
        feed.addLink("http://example.com");
        // Get the entry that was added in Service Endpoint ${seiSuffix}Impl
        Entry entry = feed.getEntries().get(0);
        entry.setId("tag:example.org,2007:/foo/entries/1");
        entry.setTitle("Entry title");
        entry.setUpdated(new Date());
        entry.setPublished(new Date());
        entry.addLink("tag:example.org,2007:/foo/entries/1");
        //entry.addLink(uri.getRequestUri().toString());

#end
        // Dummy return value implementation with default values, modify Impl class.
#if ($operation.returnTypePresent)
        $returnType rtn = ${stringUtils.capitalize($operation.name)}Impl.${operation.name}TransformResponse(/* Domain response to be transformed to service response */);
#if ($operation.restAtom)
        // transform the JAXB Object to XML and put the output into the Atom feed content
        StringWriter writer = new StringWriter();
        try
        {
            JAXBContext ctx = ${service.name}WSDelegate.${operation.name}CtxInstance();
            ctx.createMarshaller().marshal(rtn, writer);
            entry.setContent(writer.toString(), "application/xml");
        }
        catch (JAXBException ex)
        {
            LOG.error(${service.name}WSDelegate.className + ".$operation.name: JAXBError ${service.name}.${operation.name}", ex);
            entry.setContent(writer.toString(), "JAXBError");
        }
        return feed;
#else
        return rtn;
#end
#else
        ${stringUtils.capitalize($operation.name)}Impl.${operation.name}TransformResponse(/* Domain response to be transformed to service response */);
#end
#else
        throw new UnsupportedOperationException("Service ${service.name}.${operation.name} not implemented.");
        // Dummy return value implementation with default values, modify Impl class.
//      $returnType rtn = ${stringUtils.capitalize($operation.name)}.${operation.name}TransformResponse(/* Domain response to be transformed to service response */);
//      return rtn;
#end
    }
#end
}

#end
