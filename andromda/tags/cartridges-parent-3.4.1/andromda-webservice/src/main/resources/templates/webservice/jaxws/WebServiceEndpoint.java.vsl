#if ($umlUtils.shouldOutput($service))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    jaxws/WebServiceEndpoint.vsl in andromda-webservice cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

#if ($service.restCount>0)
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
#else
import javax.jws.WebService;
#end
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * WebService Service Endpoint Implementation for the $service.name service endpoint interface (${service.name}${seiSuffix}).
$service.getDocumentation(" * ")
 */

#if ($service.restCount>0)
#if ($stringUtils.isNotBlank($service.restPath))
@Path($service.restPath)
#end
#if ($stringUtils.isNotBlank($service.restProduces))
@Produces($service.restProduces)
#end
#if ($stringUtils.isNotBlank($service.restConsumes))
@javax.ws.rs.Consumes("$operation.restConsumes")
#end
#else
@WebService(serviceName = "$service.name",
            portName = "$service.name",
            targetNamespace="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end",
            //wsdlLocation = "wsdl/${service.name}.wsdl",
            endpointInterface="${service.fullyQualifiedName}${seiSuffix}")
#end
#if ($service.hasStereotype("WSAddressing"))
@javax.xml.ws.soap.Addressing(enabled=true, required=true)
#end
public class ${service.name}${seiSuffix}Impl #if(!$service.rest)implements ${service.name}${seiSuffix}#end

#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}${seiSuffix}Impl
#end
{
    private static final Logger LOG = LoggerFactory.getLogger(${service.name}${seiSuffix}Impl.class);
    private static final String className = "${service.name}${seiSuffix}Impl";
#if ($service.restAtom)

    // There really should only be a single global instance of abdera
    private static org.apache.abdera.Abdera abdera = null;

    /**
     * @return new Abdera Instance for service ${service.name}
     */
    public static synchronized org.apache.abdera.Abdera getAbderaInstance()
    {
      if (abdera == null) abdera = new org.apache.abdera.Abdera();
      return abdera;
    }
#end
#foreach ( $operation in $service.allowedOperations)
#if ($service.hasStereotype("WSCustomHeader"))
#set ($serviceElementName = $service.findTaggedValue("andromda_wsdl_header_element"))
#set ($serviceNamespace = $service.findTaggedValue("andromda_header_namespace"))
#set ($serviceClassName = "${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName")
#set ($serviceParameterName = $stringUtils.uncapitalize($serviceElementName))
#end
#if ($service.hasStereotype("WSSecurity"))
#set ($securityElementName = $service.findTaggedValue("andromda_wsdl_security_element"))
#set ($securityNamespace = $service.findTaggedValue("andromda_security_namespace"))
#set ($securityClassName = "${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName")
#set ($securityParameterName = $stringUtils.uncapitalize($securityElementName))
#end

   /**
    * Invokes the $operation.name service method on ${service.name}.
$operation.getDocumentation("    * ")
##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##set ($returnType = "$stringUtils.capitalize(${operation.operationName})Response")
##    * @param $stringUtils.capitalize(${operation.operationName})RequestWrapper ${operation.operationName}RequestWrapper
##    * @return ${operation.operationName}Response $returnType
##else
#if ($operation.restAtom)
#set ($returnType = "org.apache.abdera.model.Feed")
#elseif (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
#end
#foreach ($parameter in $operation.arguments)
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($multiplicity="Multiplicity *")
#else
#set ($multiplicity="")
#end
    * @param $parameter.name $parameter.type.packageName $parameter.type.name required=$parameter.required $multiplicity
#end
#if ($operation.returnTypePresent)
    * @return ${operation.operationName}Response $returnType
#end
##end
#foreach ( $exception in $operation.exceptions)
    * @throws $exception.fullyQualifiedName
#end
    * @see ${service.name}${seiSuffix}#${operation.getSignature(false)}
##    * @throws RemoteException if ${service.name}.${operation.operationName} fails
#foreach ($constraint in $operation.constraints)
    * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end ${constraint.body}
#end
    */
## Non public methods do not appear in the Interface class. JDK 1.5 cannot override interface methods
#if ($enableAnnotations && $operation.visibility == "public" && $javaVersion.compareTo("1.6")>-1)
    @Override
#end
#if ($operation.rest)
#if ($stringUtils.isNotBlank($operation.restRequestType))
    $operation.restRequestType
#end
    @Path($operation.restPath)
#if ($stringUtils.isNotBlank($operation.restProduces))
    @Produces($operation.restProduces)
#end
#if ($stringUtils.isNotBlank($operation.restConsumes))
    @javax.ws.rs.Consumes($operation.restConsumes)
#end
#end
    public $returnType $operation.name
##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##    ($stringUtils.capitalize(${operation.operationName})RequestWrapper ${operation.operationName}RequestWrapper)
##else
    (
#set ($comma = "")
#if (!$operation.arguments.empty)
## If parameter.name not supplied by WebParam, it defaults to arg0, arg1 etc from wsdlgen tools
#foreach ($parameter in $operation.arguments)
## JAXB always creates type List even if unique/sorted
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($paramType="java.util.List<${parameter.type.fullyQualifiedName}>")
#else
#set ($paramType=$parameter.getterSetterTypeName)
#end
##end
##        ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
        ${comma}#if($operation.rest)$parameter.restParamType#end $paramType $parameter.name
#set ($comma = ", ")
#end
#end
#if ($service.hasStereotype("WSCustomHeader"))
        ${comma}$serviceClassName $serviceParameterName
#set ($comma = ", ")
#end
#if ($service.hasStereotype("WSSecurity"))
        ${comma}$securityClassName $securityParameterName
#end
    )
##end
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
        LOG.info(${service.name}${seiSuffix}Impl.className + ".$operation.name: Executing with: " #foreach ($parameter in $operation.parameters)#if (!$parameter.return) + ${parameter.name}#end#end);
##        // TODO: Add boundary logging for message in / out
#if (!$operation.arguments.empty)

        StringBuilder missing = new StringBuilder();
#end

#set ($propertyNum=0)
#set ($property1Num=0)
#foreach ($parameter in $operation.arguments)
#if (!$parameter.type.primitive)
        if ($parameter.name!=null#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1)) && !${parameter.name}.isEmpty()#end)
        {
#end
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($tab="    ")
#set ($parameterName="${parameter.name}Element")
            for ($parameter.type.fullyQualifiedName $parameterName : ${parameter.name})
            {
#else##if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($tab="")
#set ($parameterName="${parameter.name}")
#end##if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#foreach ($property in $parameter.type.allProperties)
#set ($propertyNum=$propertyNum+1)
##$tab            // ${parameter.type.name} property $property.name $property.fullyQualifiedName $property.required with $parameter.type.allProperties.size() properties
#if ($property.many)
#set ($tab1="    ")
$tab            if (#if(!$property.type.primitive)$parameterName.${property.getterName}()!=null && #end!$parameterName.${property.getterName}().isEmpty())
$tab            {
##$tab                ${property.getterSetterTypeName} ${property.name}${propertyNum}List = $parameterName.${property.getterName}();
$tab                for ($property.type.fullyQualifiedName ${property.name}$propertyNum : $parameterName.${property.getterName}())
$tab                {
#if (!$property.type.allProperties.empty)
##end
##if (!$property.type.allProperties.empty)
##if (!$property.type.allProperties.empty && !$property.type.fullyQualifiedName.equals("java.util.Calendar"))
## propertyNum prevents name conflicts between property attributes
#else##if ($property.many)
#set ($tab1="")
#if (!$property.type.allProperties.empty)
$tab            if ($parameterName.${property.getterName}()!=null)
$tab            {
$tab                ${property.type.fullyQualifiedName} ${property.name}$propertyNum = $parameterName.${property.getterName}(); // ${property.name}.many=$property.many
#end
#end
#foreach ($property1 in $property.type.allProperties)
#set ($property1Num=$property1Num+1)
##$tab$tab1                // ${property.type.name} property1 $property1.name $property1.fullyQualifiedName $property1.required with $property.type.allProperties.size() properties
#if ($property1.many)
##$tab$tab1                // isMany: property1=$property1 property1.type=$property1.type

$tab$tab1                if (${property.name}$propertyNum.${property1.getterName}()!=null && !${property.name}$propertyNum.${property1.getterName}().isEmpty())
$tab$tab1                {
##$tab$tab1                    ${property1.getterSetterTypeName} ${property1.name}List${property1Num}1 = ${property.name}$propertyNum.${property1.getterName}();
$tab$tab1                    for ($property1.type.fullyQualifiedName ${property1.name}${property1Num}1 : ${property.name}$propertyNum.${property1.getterName}())
$tab$tab1                    {
#if (!$property1.type.allProperties.empty)
$tab$tab1                        if (${property1.name}${property1Num}1!=null)
$tab$tab1                        {
#foreach ($property2 in $property1.type.allProperties)
##$tab$tab1                            // ${property1.type.name} property2 $property2.name $property2.fullyQualifiedName $property2.required with $property1.type.allProperties.size() properties
##$tab$tab1                            /* ${property2.getterSetterTypeName} ${property2.name}${property1Num}1 = */ ${property1.name}${property1Num}1.${property2.getterName}();
#if ($property2.required && !$property2.type.primitive)
$tab$tab1                            if (${property1.name}${property1Num}1.${property2.getterName}()==null)
$tab$tab1                            {
$tab$tab1                                missing.append("${parameter.name}.${property.name}.${property1.name}.${property2.name} ");
$tab$tab1                            }
#end
#end
#end
#if (!$property1.type.allProperties.empty)
$tab$tab1                        } // !property1.type.allProperties.empty
#end
$tab$tab1                    }
$tab$tab1                }
#if ($property1.required)
$tab$tab1                else
$tab$tab1                {
$tab$tab1                    missing.append("${parameter.name}.${property.name}.${property1.name} ");
$tab$tab1                }
#end
##                // TODO: Iterate through properties in ${property1.type.fullyQualifiedName}
#else##if ($property1.many)
##$tab$tab1                // property1=$property property1.type=$property.type isMany=$property.many
##if ($property1.required)
##$tab$tab1                ${property1.getterSetterTypeName} ${property1.name}${property1Num}1 = ${property.name}$propertyNum.${property1.getterName}();
##end
#if ($property1.required && !$property1.type.primitive)
$tab$tab1                if (${property.name}$propertyNum.${property1.getterName}()==null)
$tab$tab1                {
$tab$tab1                    missing.append("${parameter.name}.${property.name}.${property1.name} ");
$tab$tab1                }
#end
##              // TODO: Foreach property in ${property1.getterSetterTypeName} ${property1.name}${propertyNum}.setXXX(value) or getList().add(value)
#end##if ($property1.many)
#end##foreach ($property1 in $property.type.allProperties)
#end##if (!$property.type.allProperties.empty)
##if (!$property.type.allProperties.empty)
##$tab$tab1            } // !property.type.allProperties.empty
##// ${property.name} property.type.allProperties.empty $property.type.allProperties.empty
##end
#if ($property.many)
$tab                } // property end for
$tab            } // property ${property.name}.many=$property.many
##// property.many $property.many
#end
#end##foreach ($property in $parameter.type.allProperties)

##end##if (!$parameter.type.fullyQualifiedName.equals("java.util.Calendar"))
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
$tab        }
##// ${parameter.name}.upper=$parameter.upper
#end
#if (!$parameter.type.primitive)
        }
##// $parameter.name!=null
#if ($parameter.required)
        else
        {
            missing.append("$parameter.name ");
        }
#end
#end
#end
#if (!$operation.arguments.empty)

        if (missing.length()>0)
        {
            missing = missing.insert(0, "The following required parameters are missing from ${service.name}.${operation.name}: ");
            ${service.packageName}.$stringUtils.capitalize($operation.operationName) ${operation.name}Req = new ${service.packageName}.$stringUtils.capitalize($operation.operationName)();
#foreach ($parameter in $operation.arguments)
#if ($parameter.upper>1 || $parameter.upper==-1)
## Avoid the problem with setting the value of a live List not allowed
            if (${parameter.name} != null)
            {
                for ($parameter.type.fullyQualifiedName value : ${parameter.name})
                {
                    ${operation.name}Req.get$stringUtils.capitalize($parameter.name)().add(value);
                }
            }
#else
            ${operation.name}Req.set$stringUtils.capitalize($parameter.name)(${parameter.name});
#end
#end
            LOG.error("${service.name}${seiSuffix}Impl.${operation.name}: " + missing.toString() + " in " + ${operation.name}Req.toString());
            throw new IllegalArgumentException(missing.toString());
        }
#end
#if ($operation.returnTypePresent || $operation.restAtom)
#set ($rtn = "return ")
#else
#set ($rtn = " ")
#end
##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##        $operation.returnType.fullyQualifiedName rtn = delegate.${operation.name}(
##set ($comma = "")
##foreach ( $parameter in $operation.arguments)
## If parameter.name not supplied by WebParam, it defaults to arg0, arg1 etc from wsdlgen tools
##if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
##set ($paramType="java.util.List<$parameter.type.fullyQualifiedName>")
##else
##set ($paramType=$parameter.type.fullyQualifiedName)
##end
##        $comma ${operation.operationName}RequestWrapper.get$stringUtils.capitalize($parameter.name)()
##set ($comma = ", ")
##end
##        );
##        $returnType resp = new ${returnType}();
##        resp.set${returnType}(rtn);
##        return resp;
##else
#if ($operation.restAtom)
#set ($returnType="org.apache.abdera.model.Feed")
#set ($returnTypeName="feed")
#set ($arguments="feed")
        $returnType $returnTypeName = getAbderaInstance().getFactory().newFeed();
#if ($operation.hasStereotype("WebServiceFeed"))
#set ($tag=$operation.findTaggedValue("andromda_feed_id"))
#if ($StringUtils.isNotBlank($tag))
        feed.setId("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_title"))
#if ($StringUtils.isNotBlank($tag))
        feed.setTitle("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_subtitle"))
#if ($StringUtils.isNotBlank($tag))
        feed.setSubtitle("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_updated"))
#if ($StringUtils.isNotBlank($tag))
        feed.setUpdated("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_author"))
#if ($StringUtils.isNotBlank($tag))
        feed.addAuthor("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_link"))
#if ($StringUtils.isNotBlank($tag))
        feed.addLink("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_category"))
#if ($StringUtils.isNotBlank($tag))
        feed.addCategory("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_contributor"))
#if ($StringUtils.isNotBlank($tag))
        feed.addContributor("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_icon"))
#if ($StringUtils.isNotBlank($tag))
        feed.setIcon("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_logo"))
#if ($StringUtils.isNotBlank($tag))
        feed.setLogo("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_feed_rights"))
#if ($StringUtils.isNotBlank($tag))
        feed.setRights("$tag");
#end
        org.apache.abdera.model.Entry entry = feed.addEntry();
#set ($tag=$operation.findTaggedValue("andromda_entry_id"))
#if ($StringUtils.isNotBlank($tag))
        entry.setId("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_title"))
#if ($StringUtils.isNotBlank($tag))
        entry.setTitle("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_updated"))
#if ($StringUtils.isNotBlank($tag))
        entry.setUpdated("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_published"))
#if ($StringUtils.isNotBlank($tag))
        feed.setPublished("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_link"))
#if ($StringUtils.isNotBlank($tag))
        entry.addLink("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_author"))
#if ($StringUtils.isNotBlank($tag))
        entry.addAuthor("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_contributor"))
#if ($StringUtils.isNotBlank($tag))
        entry.addContributor("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_category"))
#if ($StringUtils.isNotBlank($tag))
        entry.addCategory("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_rights"))
#if ($StringUtils.isNotBlank($tag))
        entry.setRights("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_source"))
#if ($StringUtils.isNotBlank($tag))
        entry.setSource("$tag");
#end
#set ($tag=$operation.findTaggedValue("andromda_entry_summary"))
#if ($StringUtils.isNotBlank($tag))
        entry.setSummary("$tag");
#end
#end
#else
#set ($returnTypeName=$stringUtils.uncapitalize($operation.returnType.name))
#if ($returnTypeName.endsWith("[]"))
#set ($returnTypeName=$returnTypeName.replace("[]",""))
#end
#set ($arguments="$operation.argumentNames")
#if ($service.hasStereotype("WSCustomHeader"))
#if ($stringUtils.isBlank($arguments))
#set ($arguments="$serviceParameterName")
#else
#set ($arguments="$arguments, $serviceParameterName")
#end
#end
#if ($service.hasStereotype("WSSecurity"))
#if ($stringUtils.isBlank($arguments))
#set ($arguments="$securityParameterName")
#else
#set ($arguments="$arguments, $securityParameterName")
#end
#end
#end
        ${service.name}WSDelegate delegate = new ${service.name}WSDelegate();
#if ($operation.returnTypePresent || $operation.restAtom)
        $returnType ${returnTypeName}Return = delegate.${operation.name}($arguments);
        LOG.info(${service.name}${seiSuffix}Impl.className + "$operation.name: Returning ${service.name}.${operation.name}: " + ${returnTypeName}Return);
        ${rtn}${returnTypeName}Return;
#else
        delegate.${operation.name}($arguments);
        LOG.info(${service.name}${seiSuffix}Impl.className + "$operation.name: Creating ${service.name}.${operation.name}");
#end
##end
    }
#end
}

#end
