#if ($umlUtils.shouldOutput($operation))
#if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
#set ($className=$stringUtils.capitalize($operation.operationName))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    jaxws/MethodRequest.java.vsl in andromda-webservice cartridge
 * MODEL CLASS: $operation.validationName
#foreach ($stereotype in $operation.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $operation.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * Method Request wrapper for webservice request element
 * ${operation.owner.fullyQualifiedName}.${operation.name}()
 */
@XmlAccessorType(XmlAccessType.FIELD)
#set ($comma="")
@XmlType(name = ""#if (!$operation.arguments.empty), propOrder = {
#foreach ($argument in $operation.arguments)
$comma"$argument.name"#set ($comma=", ")#end
}#end)
@XmlRootElement(name = "$operation.operationName")
public class $className
#if ($service.generalization)
    extends $service.generalization.fullyQualifiedName
#end
    implements Serializable, Comparable<$className>
{
    private static final long serialVersionUID = 1L;
#if (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
#end
#foreach ($parameter in $operation.arguments)
#set ($useAttributes = $xmlAttributes && !($parameter.upper>1||$parameter.upper==-1) && ($stringUtils.isBlank($parameter.type.packageName) || $parameter.type.packageName.equals("java.lang") || $type.equals("java.util") || $type.equals("java.math") || $parameter.type.packageName.equals("PrimitiveTypes")))
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($paramType="java.util.List<$parameter.type.fullyQualifiedName>")
#set ($type="")
#else
#set ($paramType=$parameter.getterSetterTypeName)
#set ($type=$parameter.type.name)
#end

    /**
$parameter.getDocumentation("     * ")
     */
#if (($type.equals("DateTime") && $stringUtils.isNotBlank(${XMLDateTimeAdapter})) || ($type.equals("Time") && $stringUtils.isNotBlank(${XMLTimeAdapter}))|| ($type.equals("Date") && $stringUtils.isNotBlank(${XMLDateAdapter}))|| ($type.equals("Integer") && $stringUtils.isNotBlank(${XMLIntegerAdapter}))|| ($type.equals("Double") && $stringUtils.isNotBlank(${XMLDecimalAdapter}))|| ($type.equals("Boolean") && $stringUtils.isNotBlank(${XMLBooleanAdapter})))
##set ($elementType=", type=String.class")
    @javax.xml.bind.annotation.XmlElement(#if ($parameter.required)required = true,#end type = String.class)
    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(#if ($type.equals("DateTime"))${XMLDateTimeAdapter}#elseif($type.equals("Time"))${XMLTimeAdapter}#elseif($type.equals("Date"))${XMLDateAdapter}#elseif($type.equals("Integer"))${XMLIntegerAdapter}#elseif($type.equals("Double"))${XMLDecimalAdapter}#elseif($type.equals("Boolean"))${XMLBooleanAdapter}#end.class)
##set ($schemaType=$operation.returnType.schemaType.substring(0,9))
    @javax.xml.bind.annotation.XmlSchemaType(name = "$parameter.type.schemaType.substring(3)")
#else
    @javax.xml.bind.annotation.XmlElement(#if ($parameter.required)required = true#end)
#end
    protected $paramType $parameter.name#if ($parameter.defaultValuePresent) = ${parameter.defaultValue}#end;

    /**
$parameter.getDocumentation("     * ")
     * Gets the value of the $parameter.name property
     * @return $parameter.name $paramType
     *     possible object is {#if (!$parameter.type.primitive)@link#end $paramType }
     */
    public $paramType ${parameter.getterName}()
    {
#if ($parameter.upper>1 || $parameter.upper==-1)
        if (this.$parameter.name == null)
        {
            this.$parameter.name = new $umlUtils.getImplCollection($paramType)();
        }
#end
        return this.$parameter.name;
    }

#if ($parameter.type.booleanType)
    /**
$parameter.getDocumentation("     * ")
     * Duplicates#if ($parameter.lower > 0) isBoolean#else getBoolean#end method, for use as Jaxb2 compatible object
     * Get the $parameter.name Parameter
     * @return $parameter.name $paramType
     *     possible object is
     *     {@link $paramType }
    @Deprecated
    public $paramType#if ($parameter.lower > 0) get#else is#end$stringUtils.capitalize(${parameter.name})()
    {
        return this.$parameter.name;
    }
     */

#end
## - always have as public, having read-only causes too many issues when attempting to
##   use in other cartridges
    /**
$parameter.getDocumentation("     * ")
     * @param ${parameter.name}In
     */
    public void ${parameter.setterName}($paramType ${parameter.name}In)
    {
        this.$parameter.name = ${parameter.name}In;
#if ($parameter.type.primitive)
        this.set${stringUtils.capitalize(${parameter.name})} = true;
#end
    }
#if ($parameter.type.primitive)

    @javax.xml.bind.annotation.XmlTransient
    private boolean set${stringUtils.capitalize(${parameter.name})} = false;
    /**
     * Returns true if $parameter.name value is set
     * @return boolean true if value is set (not null)
     */
    public boolean isSet${stringUtils.capitalize($parameter.name)}()
    {
        return this.set${stringUtils.capitalize(${parameter.name})};
    }
#end
#end

    /**
     * @param object to compare this object against
     * @return boolean true if equal
     * @see Object#equals(Object)
     */
#if ($enableAnnotations)
    @Override
#end
    public boolean equals(Object object)
    {
        if (object==null || object.getClass() != this.getClass())
        {
             return false;
        }
#if (!$operation.arguments.empty)
        $className rhs = ($className) object;
#end
        return new EqualsBuilder().appendSuper(super.equals(object))
#foreach($parameter in $operation.arguments)
            .append(this.${parameter.getterName}(), rhs.${parameter.getterName}())
#end
            .isEquals();
    }

    /**
     * @param myClass the external class to compare this object against
     * @return int=0 if equal, -1 if this lessThan myClass, 1 if this greaterThan myClass
     * @see Comparable#compareTo(Object)
     */
#if ($enableAnnotations && $javaVersion.compareTo("1.6")>-1)
    @Override
#end
    public int compareTo($className myClass)
    {
        if (myClass==null)
        {
            return -1;
        }
        // Check if the same object instance
        if (myClass==this)
        {
            return 0;
        }
        return new CompareToBuilder()
#foreach($parameter in $operation.arguments)
             .append(this.${parameter.getterName}(), myClass.${parameter.getterName}())
#end
             .toComparison();
    }

    /**
     * @return int hashCode value
     * @see Object#hashCode()
     */
#if ($enableAnnotations)
    @Override
#end
    public int hashCode()
    {
        return new HashCodeBuilder(1249046965, -82296885).appendSuper(super.hashCode())
#foreach($parameter in $operation.arguments)
           .append(this.${parameter.getterName}())
#end
           .toHashCode();
    }

    /**
     * @return String representation of object
     * @see Object#toString()
     */
#if ($enableAnnotations)
    @Override
#end
    public String toString()
    {
        return new ToStringBuilder(this)
#foreach($parameter in $operation.arguments)
            .append("${parameter.name}", this.${parameter.getterName}())
#end
            .toString();
    }
}

#end
#end