package org.axis2test4;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.apache.axis2.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.aop.support.AopUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.remoting.rmi.RmiClientInterceptorUtils;

/**
 * Interceptor for accessing a specific port of a web service.
 */
public class Axis2PortClientInterceptor
    implements MethodInterceptor,
        InitializingBean
{
    protected final Log logger = LogFactory.getLog(Axis2PortClientInterceptor.class);
    private boolean lookupServiceOnStartup = true;
    private final Object preparationMonitor = new Object();
    private String username;

    /**
     * Set the username to connect to the service.
     */
    public void setUsername(String username)
    {
        this.username = username;
    }

    /**
     * Return the username to connect to the service.
     */
    public String getUsername()
    {
        return username;
    }

    private String password;

    /**
     * Set the password to connect to the service.
     */
    public void setPassword(String password)
    {
        this.password = password;
    }

    /**
     * Return the password to connect to the service.
     */
    public String getPassword()
    {
        return password;
    }

    private Class serviceInterface;

    /**
     * Set the interface of the service that this factory should create a proxy for.
     */
    public void setServiceInterface(Class serviceInterface)
    {
        if (serviceInterface != null && !serviceInterface.isInterface())
        {
            throw new IllegalArgumentException("serviceInterface must be an interface");
        }
        this.serviceInterface = serviceInterface;
    }

    /**
     * Return the interface of the service that this factory should create a proxy for.
     */
    public Class getServiceInterface()
    {
        return serviceInterface;
    }

    private String wsdlUrl;

    /**
     * Returns the URL to the WSDL for the service.
     *
     * @return the wsdlUrl
     */
    public String getWsdlUrl()
    {
        return wsdlUrl;
    }

    /**
     * Sets the WSDL URL for the service.
     *
     * @param wsdlUrl the wsdlUrl to set
     */
    public void setWsdlUrl(String wsdlUrl)
    {
        this.wsdlUrl = wsdlUrl;
    }

    public String portAddress;

    /**
     * Returns the port address (if not using a port address in the WSDL).
     *
     * @return the portAddress
     */
    public String getPortAddress()
    {
        return portAddress;
    }

    /**
     * Sets the port address (if to use one other than the one in the WSDL).
     *
     * @param portAddress the portAddress to set
     */
    public void setPortAddress(String portAddress)
    {
        this.portAddress = portAddress;
    }

    /**
     * Prepares the JAX-RPC service and port if the "lookupServiceOnStartup"
     * is turned on (which it is by default).
     */
    public void afterPropertiesSet()
        throws AxisFault
    {
        if (this.lookupServiceOnStartup)
        {
            prepare();
        }
    }

    private WebServiceClient client;

    /**
     * Create and initialize the service for the specified WSDL.
     */
    public void prepare()
        throws AxisFault
    {
        synchronized (this.preparationMonitor)
        {
            if (this.client == null)
            {
                this.client =
                    new WebServiceClient(
                        this.getWsdlUrl(),
                        this.getPortAddress(),
                        this.getServiceInterface(),
                        this.getUsername(),
                        this.getPassword());
            }
        }
    }

    /**
     * Return whether this client interceptor has already been prepared,
     * i.e. has already looked up the JAX-RPC service and port.
     */
    protected boolean isPrepared()
    {
        synchronized (this.preparationMonitor)
        {
            return this.client != null;
        }
    }

    /**
     * Translates the method invocation into a JAX-RPC service invocation.
     * Uses traditional RMI stub invocation if a JAX-RPC port stub is available;
     * falls back to JAX-RPC dynamic calls else.
     * @see ${esc.hash}getPortStub()
     * @see org.springframework.remoting.rmi.RmiClientInterceptorUtils
     * @see ${esc.hash}performJaxRpcCall
     */
    public Object invoke(MethodInvocation invocation)
        throws Throwable
    {
        if (AopUtils.isToStringMethod(invocation.getMethod()))
        {
            return "Axis2 proxy for WSDL [" + this.getWsdlUrl() + "] of service [" +
            this.getServiceInterface().getName() + ']';
        }

        // Lazily prepare client if appropriate.
        if (!this.lookupServiceOnStartup)
        {
            if (!isPrepared())
            {
                try
                {
                    prepare();
                }
                catch (AxisFault exception)
                {
                    System.out.println("converting the exception!!!: " + exception);
                    throw RmiClientInterceptorUtils.convertRmiAccessException(
                        invocation.getMethod(),
                        exception,
                        this.getServiceInterface().getName());
                }
            }
        }
        else
        {
            if (!this.isPrepared())
            {
                throw new IllegalStateException(this.getClass().getName() + " is not properly initialized - " +
                    "invoke 'prepare' before attempting any operations");
            }
        }

        if (logger.isDebugEnabled())
        {
            logger.debug(
                "Invoking operation '" + invocation.getMethod().getName() + "' on " +
                this.getServiceInterface().getName());
        }
        try
        {
            try
            {
                return this.client.invokeBlocking(
                    invocation.getMethod().getName(),
                    invocation.getArguments());
            }
            finally
            {
                this.client.cleanup();
            }
        }
        catch (AxisFault exception)
        {
            throw RmiClientInterceptorUtils.convertRmiAccessException(
                invocation.getMethod(),
                exception,
                this.getServiceInterface().getName());
        }
    }
}
