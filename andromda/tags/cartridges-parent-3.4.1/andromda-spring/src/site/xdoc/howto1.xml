<?xml version="1.0" encoding="iso-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>AndroMDA - Spring - HowTo (1)</title>
        <author email="wouter@andromda.org">Wouter Zoons</author>
    </properties>

    <body>
        <section name="Entities">
            <p>
                With entities we mean what is usually implemented using Entity Beans or Hibernate POJOs (i.e. a
                persistent entity like a Company or Person for example);
                in the Spring cartridge you will not need to worry about the underlying persistence technology, but
                you will probably want to know that Hibernate POJOs will be generated for the
                entities you model.
            </p>
            <p>
                In order to successfully generate a single entity it is sufficient to simply
                model a single class and assign it the <![CDATA[<<Entity>>]]> stereotype, this stereotype tells
                the Spring cartridge to treat this class as an entity.
            </p>
            <p>
                Let's start by modeling a package <code>org.andromda.test</code> and putting a class
                inside that package, give that class the name <code>Car</code>. Now make sure that entity
                has the <![CDATA[<<Entity>>]]> stereotype, it depends on your UML tool how you need to do
                that exactly.
            </p>
            <p>
                <img src="howto/org/andromda/test/1/a/uml.gif" alt="howto/org/andromda/test/1/a/uml.gif"/>
            </p>
            <p>
                You can now try to generate code
                from your model and take a look at what is generated. If you don't know how to generate code using
                AndroMDA then head on over to the
                <a href="../../starting.html">getting started</a> guide (especially the section explaining
                <a href="../../starting.html#My_first_AndroMDA_project">how to setup your first AndroMDA project</a>).
            </p>
            <p>
                If everything went well, all code related to this class will have been generated into
                the <code>/core/target/src</code> project subdirectory, no manual implementation will need
                to be added at this point.
            </p>
            <ul>
                <li class="gen">Auto-generated source that does not need manual editing</li>
                <li class="impl">Auto-generated source that should be edited manually</li>
                <li class="changed">File that is affected by the modifications applied in this section</li>
            </ul>
            <ul>
                <li class="gen"><a href="howto/org/andromda/test/1/a/Car.hbm.xml"><code>Car.hbm.xml</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/1/a/Car.java"><code>Car.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/1/a/CarImpl.java"><code>CarImpl.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/1/a/CarDao.java"><code>CarDao.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/1/a/CarDaoBase.java"><code>CarDaoBase.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/1/a/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></li>
            </ul>
            <p>
                The class we have modeled does not have any properties, however, we notice it having an 'id'
                attribute, where is it coming from ? Well, by default AndroMDA configures the Spring cartridge
                to generate an identifier when none have been modeled by the user, this identifier is called
                <code>id</code>, and it is of type <code>datatype::Long</code>. It is possible to override these
                settings in the
                <a href="../../andromda-maven-plugins/andromda-maven-plugin/properties.html#Defining_Namespace_Properties">namespace
                properties for Maven</a> or the
                <a href="../../andromda-ant-task.html/index.html#andromda-example">namespace properties for Ant</a>. Click
                <a href="../../andromda-metafacades/andromda-uml-metafacades/andromda-metafacades-uml/namespace.html">here</a>
                if you want to know more about the default namespace properties you can set.
            </p>
            <p>
                You may also model operations on an entity, this will generate them as methods in the resulting
                Java class. Operations that are classifier scoped (<code>static</code> in Java) will go into
                the corresponding DAO, in UML diagrams those operations are underlined when shown.
            </p>
            <p>
                <img src="howto/org/andromda/test/1/b/uml.gif" alt="howto/org/andromda/test/1/b/uml.gif"/>
            </p>
            <ul>
                <li class="gen">Auto-generated source that does not need manual editing</li>
                <li class="impl">Auto-generated source that should be edited manually</li>
                <li class="changed">File that is affected by the modifications applied in this section</li>
            </ul>
            <ul>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/1/b/Car.hbm.xml"><code>Car.hbm.xml</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/1/b/Car.java"><code>Car.java</code></a></li>
                <li class="impl"><a class="changed" href="howto/org/andromda/test/1/b/CarImpl.java"><code>CarImpl.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/1/b/CarDao.java"><code>CarDao.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/1/b/CarDaoBase.java"><code>CarDaoBase.java</code></a></li>
                <li class="impl"><a class="changed" href="howto/org/andromda/test/1/b/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></li>
            </ul>
            <p>
                So far we have modeled some very basic stuff, let's add a bit of complexity in the next sections.
            </p>
            <subsection name="Unique Attributes">
                <p>
                    In case you want an entity's attribute to be unique for all instances of that entity's type you
                    should assign the <![CDATA[<<Unique>>]]> stereotype to it.
                </p>
            </subsection>
            <subsection name="Attribute Multiplicity">
                <p>
                    It's possible to configure the multiplicity of an entity's attribute, by setting it to
                    <code>[0..1]</code> an attribute is not required and is allowed to be set to
                    <code>null</code>; setting the multiplicity to a value greater than <code>0</code>
                    means the attribute is required.
                </p>
                <p>
                    Please note that some UML tools have a default multiplicity value for attributes when not
                    specified by the user, these default values may differ from tool to tool.
                </p>
            </subsection>
            <subsection name="Nullable Parameters">
                <p>
                    If you want an operation to have a parameter which is allowed to be <code>null</code> then simply
                    assign the <![CDATA[<<Nullable>>]]> stereotype to that parameter. By default service and DAO
                    operations throw an exception when a <code>null</code> argument has been passed.
                </p>
                <p>
                    It is possible to globally disable checking for <code>null</code> arguments, so you will never
                    need to specify the <![CDATA[<<Nullable>>]]> stereotype; to do so just specify the
                    <code>parameterRequiredCheck</code> namespace property to have the <code>false</code> value.
                </p>
            </subsection>
        </section>
        <section name="Next">
            <p>
                In the next section we'll learn about entity relationships, click
                <a href="howto2.html">here</a> to continue.
            </p>
        </section>
    </body>
</document>
