<?xml version="1.0" encoding="iso-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>AndroMDA - HowTo - Queries</title>
        <author email="wouter@andromda.org">Wouter Zoons</author>
    </properties>

    <body>
        <section name="Queries">
            <p>
                All enterprise applications need to perform operations on the underlying datasource, and Hibernate
                supports this quite well with it's
                <a href="http://www.hibernate.org/hib_docs/reference/en/html_single/#queryhql">Hibernate Query
                Language</a>.
            </p>
            <p>
                UML also allows you to specify queries, be it in a more generic language. For this purpose OCL can
                be used, which supports <code>body</code> constructs since OCL 2.0. Although you can choose
                to override any generated query using a tagged value specifying your custom query it is
                strongly recommended to use OCL since this will guarantee your code to remain portable over different
                technologies. If you don't want to get to know OCL and have no problem sticking to Hibernate
                then you might consider using tagged values instead.
            </p>
            <p>
                Finder methods require the <code>query flag</code> to be set, usually operations with this flag have
                the <code>commercial at</code> symbol '@' in front of their name when displayed in diagrams. Make sure
                you model the operation in <em>classifier scope</em>, in diagrams this will show them as underlined.
                Actually, classifier scoped operations go into the DAO while instance scoped operations go into the
                entity's implementation class (they are considered to be business operations).
            </p>
            <p class="highlight">
                For simple finders the cartridge will be able to generate the proper HQL without even requiring you
                to write any OCL constraint! Just make sure to enable that <code>query</code> flag and name the operation
                <code>findByXXX(XXX : type)</code> where XXX stands for the property on which you would like to search, 
                for example: <code>findByUserName(userName : String)</code>. The finder must return a collection type
                or the type of the underlying entity. In the former case the query is simply executed and the results
                are returned, in the latter case the first element from the result set is returned 
                after being cast to the proper type. This is all done automatically and you won't need to worry about
                anything, there's no need to write any HQL yourself or to implement any method. Check the entity's DAO
                to learn what else you can do with the newly generated code (such as automatic conversion of the
                result set into value objects).
            </p>
            <p>
                The documentation discussing the modeling of queries in UML is found here:
                <a href="../../andromda-translation-libraries/andromda-ocl-translation-libraries/andromda-ocl-query-library/modeling.html">Query Translation-Library Modeling</a>.
                The tagged value overriding queries using Hibernate QL directly is found here:
                <a href="/profile.html#andromda_hibernate_query">andromda_hibernate_query</a>.
            </p>
            <p>
                <img src="howto/org/andromda/test/6/uml.gif" alt="howto/org/andromda/test/6/uml.gif"/>
            </p>
            <ul>
                <li class="gen">Auto-generated source that does not need manual editing</li>
                <li class="impl">Auto-generated source that should be edited manually</li>
                <li class="changed">File that is affected by the modifications applied in this section</li>
            </ul>
            <ul>
                <li class="gen"><a href="howto/org/andromda/test/6/Car.hbm.xml"><code>Car.hbm.xml</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/Car.java"><code>Car.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/6/CarImpl.java"><code>CarImpl.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/6/CarDao.java"><code>CarDao.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/6/CarDaoBase.java"><code>CarDaoBase.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/6/CarDaoImpl.java"><code>CarDaoImpl.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/CarType.java"><code>CarType.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/6/CarSearchCriteria.java"><code>CarSearchCriteria.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/spring/CriteriaSearch.java"><code>CriteriaSearch.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/spring/CriteriaSearchParameter.java"><code>CriteriaSearchParameter.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/spring/CriteriaSearchConfiguration.java"><code>CriteriaSearchConfiguration.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/Person.hbm.xml"><code>Person.hbm.xml</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/Person.java"><code>Person.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/PersonImpl.java"><code>PersonImpl.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/6/PersonDao.java"><code>PersonDao.java</code></a></li>
                <li class="gen"><a class="changed" href="howto/org/andromda/test/6/PersonDaoBase.java"><code>PersonDaoBase.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/PersonDaoImpl.java"><code>PersonDaoImpl.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/RentalService.java"><code>RentalService.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/RentalServiceBase.java"><code>RentalServiceBase.java</code></a></li>
                <li class="impl"><a href="howto/org/andromda/test/6/RentalServiceImpl.java"><code>RentalServiceImpl.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/ejb/RentalService.java"><code>ejb/RentalService.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/ejb/RentalServiceBean.java"><code>ejb/RentalServiceBean.java</code></a></li>
                <li class="gen"><a href="howto/org/andromda/test/6/ejb/RentalServiceHome.java"><code>ejb/RentalServiceHome.java</code></a></li>
            </ul>
        </section>
        <section name="Criteria Queries">
            <p>
                Notice how one of the classes has been labeled <![CDATA[<<Criteria>>]]> and used in one
                of the queries. This will yield a specific piece of code allowing a search on any combination
                of existing properties.
            </p>
            <p>
                Tagged values may be added to the attributes of such a class. They are interesting when you want to
                wire the attributes to specific properties of the domain model. You can
                also set the comparator for the criteria search (equal, like, less, ...) or define certain attributes
                to be included in the search even if they are <code>null</code>.
                You can even activate result set ordering (ascending / descending) by just applying two tagged values
                to one or more criteria search attributes. For more details
                go here: <a href="profile.html#Tagged_Values">Tagged Values</a>.
            </p>
            <p>
                These criteria objects allow to set the maximum number of elements to fetch, just do something
                like this:
<source><![CDATA[
   // we need to find cars with name 'audi' only
   CarSearchCriteria searchCriteria = new CarSearchCriteria(null, "audi");
   // after 1200 cars are found we stop searching
   searchCriteria.setMaximumResultSize(new Integer(1200));

   // initiate the search by calling the DAO
   List audis = getCarDao().findByCriteria(searchCriteria);
]]></source>
            </p>
        </section>
        <section name="Nice to know">
            <subsection name="A few supported query features">
                <p>

                </p>
            </subsection>
            <subsection name="Overriding queries">
                <p>
                    It's allowed to override queries such as finders in the DAO, just override the appropriate method
                    in an entity's DAO implementation class. What follows is an example of a code snippet
                    overriding a generated HQL query (example taken from a ficticous <code>UserDAOImpl</code> class):
<source><![CDATA[
public List findActiveUsers(int transform)
{
    // the next query is user-specified and overrides the one generated in super.findActiveUsers(int transform)
    return super.findActiveUsers(transform, "from org.andromda.test.Users as user where user.exitDate is null");
}
]]></source>
                </p>
                <p>
                    You might consider doing this when you think the generated query is not performant enough, or
                    when you need to do something which is so complex the OCL translation can't properly handle it.
                </p>
            </subsection>
        </section>
        <section name="Next">
            <p>
                The next section will cover the modeling of exceptions, click
                <a href="howto7.html">here</a> to go to that section.
            </p>
        </section>
    </body>
</document>
