#if(!$hibernateUtils.version2 && !$hibernateEntityAnnotations)
#parse("templates/hibernate3/hibernate.hbm.xml.vm")
#set ($generatedFile = "${entity.packagePath}/${entity.entityName}.hbm.xml")
<?xml version="1.0" encoding="$xmlEncoding"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by hibernate3/hibernate.hbm.xml.vsl in andromda-hibernate-cartridge on $hibernateUtils.date.
  -->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping default-cascade="$entity.hibernateDefaultCascade">
#if ($mapSubclassesInSeparateFile && $entity.generalization)
#renderSubClass3($entity "    ")
#else
    <class name="$entity.fullyQualifiedEntityImplementationName"
        table="$entity.tableName"#if($stringUtils.isNotBlank($entity.schema)) schema="$entity.schema"#end#if(!$entity.lazy) lazy="false"#end#if($entity.hibernateProxy) proxy="$entity.fullyQualifiedEntityImplementationName"#end dynamic-insert="$entity.dynamicInsert" dynamic-update="$entity.dynamicUpdate"#if (!$entity.specializations.empty && $entity.hibernateInheritanceClass && !$entity.abstract) discriminator-value="$entity.hibernateDiscriminatorValue"#end#if ($entity.xmlTagName) node="$entity.xmlTagName"#end#if ($entity.abstract) abstract="true"#end>
## Comment is used for DDL comments, class-description and field-description is used for Java generated from hbm mapping file
#set ($doc=$stringUtils.replaceChars($entity.getDocumentation("",999,false), "\"'&<>", ""))
#if ($stringUtils.isNotBlank($doc))
        <meta attribute="class-description">$doc</meta>
#if($hibernateEnableCache.equalsIgnoreCase("true"))
        <cache usage="$entity.hibernateCacheType" />
#end
        <comment>$doc</comment>
#elseif($hibernateEnableCache.equalsIgnoreCase("true"))
        <cache usage="$entity.hibernateCacheType" />
#end
#if (!$entity.compositeIdentifier)
#set ($identifier = $entity.identifiers.iterator().next())
        <id name="$identifier.name" type="$identifier.fullyQualifiedHibernateType" unsaved-value="$identifier.type.javaNullString"#if ($identifier.xmlTagName) node="$identifier.xmlTagName"#end>
#set ($doc=$stringUtils.replaceChars($identifier.getDocumentation("",999,false), "\"'&<>", ""))
#if ($stringUtils.isNotBlank($doc))
            <meta attribute="field-description">$doc</meta>
#end
            <column name="$identifier.columnName"#if ($generateDatabaseDependentCode) sql-type="$identifier.sqlType"#end#if ($stringUtils.isBlank($doc))/>#else>
                <comment>$doc</comment>
            </column>#end

            <generator class="$entity.hibernateGeneratorClass">
#if ($entity.sequenceHibernateGeneratorClass)
#if($stringUtils.isNotBlank($entity.schema))
#set($sequencePrefix = "${entity.schema}.")
#else
#set($sequencePrefix = "")
#end
                <param name="sequence">${sequencePrefix}${entity.sequenceName}</param>
#elseif ($entity.foreignHibernateGeneratorClass)
                <param name="property">$entity.parentEnd.name</param>
#end
                <!-- id-generator merge-point -->
            </generator>
        </id>
#else
        <composite-id name="$entity.identifierName" class="$entity.fullyQualifiedIdentifierTypeName">
#foreach ($identifier in $entity.identifiers)
#set ($doc=$stringUtils.replaceChars($identifier.getDocumentation("",999,false), "\"'&<>", ""))
#if ($stringUtils.isNotBlank($doc))
            <meta attribute="field-description">$doc</meta>
#end
            <key-property name="$identifier.name" type="$identifier.type.fullyQualifiedHibernateType">
                <column name="$identifier.columnName"#if ($generateDatabaseDependentCode) sql-type="$identifier.sqlType"#end not-null="true"#if ($stringUtils.isBlank($doc))/>#else>
                    <comment>$doc</comment>
                </column>#end

            </key-property>
#end
#foreach ($sourceEnd in $entity.identifierAssociationEnds)
#set ($doc=$stringUtils.replaceChars($identifier.getDocumentation("",999,false), "\"'&<>", ""))
#if ($stringUtils.isNotBlank($doc))
## TODO: Verify that cannot have both attribute and associationEnd identifiers. meta comes before key-property and key-many-to-one in hibernate dtd
            <meta attribute="field-description">$doc</meta>
#end
            <key-many-to-one name="$sourceEnd.otherEnd.name" class="$sourceEnd.otherEnd.type.fullyQualifiedEntityImplementationName" >
#foreach ($identifier in ${sourceEnd.otherEnd.type.identifiers})
                <column name="$identifier.columnName"#if ($generateDatabaseDependentCode) sql-type="$identifier.sqlType"#end#if ($stringUtils.isBlank($doc))/>#else>
                    <comment>$doc</comment>
                </column>#end

#end
            </key-many-to-one>
#end
        </composite-id>
#end
#if (!$entity.specializations.empty && $entity.hibernateInheritanceClass)
        <discriminator column="$entity.hibernateDiscriminatorColumn" type="$entity.hibernateDiscriminatorType"/>
#end
#if ($stringUtils.isNotBlank($entity.hibernateVersionProperty))
        <version name="$entity.hibernateVersionProperty" type="int" column="$entity.hibernateVersionPropertySqlName"/>
#end
## If super inheritance is 'interface', render super properties etc
#foreach ($generalization in $entity.allGeneralizations)
#if($generalization.mappingRequiresSuperProperties)
#renderPropertiesAndAssociations3($generalization "" "        ")
#end
#end
## render the properties and associations (if any)
#renderPropertiesAndAssociations3($entity "" "        ")
## render the subclass elements if class or subclass strategy.
#if ($entity.requiresSpecializationMapping)
#foreach ($entity in $entity.specializations)
#renderSubClass3($entity "        ")
#end## foreach
#end## ($entity.requiresMappingSpecialization)
    </class>
#end
</hibernate-mapping>
#end