#if(!$hibernateUtils.version2)
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate3/HibernateEnumeration.vsl in andromda-hibernate-cartridge on $hibernateUtils.date.
//
#if ($stringUtils.isNotBlank($enumTypesPackage))
#set ($packageName = $enumTypesPackage)
#else
#set ($packageName = $enumeration.packageName)
#end
#set ($generatedFile = "${stringUtils.replace($packageName, '.', '/')}/${enumeration.enumerationName}.java")
#if ($stringUtils.isNotBlank($packageName))
package $packageName;
#end

import ${hibernateUtils.hibernatePackage}.HibernateException;

import java.io.Serializable;
import java.sql.Types;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
$enumeration.getDocumentation(" * ")
 */
public final class $enumeration.enumerationName
#if (!$enumeration.typeSafe)
## Java5 Enumerations cannot be extended
    extends $enumeration.fullyQualifiedName
#end
    implements Serializable,
               ${hibernateUtils.hibernateUserTypePackage}.EnhancedUserType
{
    private static final int[] SQL_TYPES = {Types.VARCHAR};

    /**
     * Default constructor.  Hibernate needs the default constructor
     * to retrieve an instance of the enum from a JDBC resultset.
     * The instance will be converted to the correct enum instance
     * in {@link ${esc.hash}nullSafeGet(java.sql.ResultSet, String[], Object)}.
     */
    public ${enumeration.enumerationName}()
    {
        super();
    }

    /**
     *  @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}sqlTypes()
     */
    public int[] sqlTypes()
    {
        return SQL_TYPES;
    }

    /**
     *  @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}deepCopy(Object)
     */
    public Object deepCopy(Object value) throws HibernateException
    {
        // Enums are immutable - nothing to be done to deeply clone it
        return value;
    }

    /**
     *  @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}isMutable()
     */
    public boolean isMutable()
    {
        // Enums are immutable
        return false;
    }

    /**
     *  @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}equals(Object, Object)
     */
    public boolean equals(Object x, Object y) throws HibernateException
    {
        return (x == y) || (x != null && y != null && y.equals(x));
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}returnedClass()
     */
    public Class#if($enableTemplating)<?>#end returnedClass()
    {
        return ${enumeration.fullyQualifiedName}.class;
    }

    /**
     *  @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}nullSafeGet(java.sql.ResultSet, String[], Object)
     */
    public Object nullSafeGet(ResultSet resultSet, String[] values, Object owner) throws HibernateException, SQLException
    {
#if ($enumeration.literalType.primitive)
##        final Number value = (Number)resultSet.getObject(values[0]);
#if($enumeration.literalType.name == "char")
        final $enumeration.literalType.wrapperName value = ($enumeration.literalType.wrapperName)resultSet.getObject(values[0]).toString().charAt(0);
#else
        final $enumeration.literalType.wrapperName value = ($enumeration.literalType.wrapperName)resultSet.getObject(values[0]);
#end
        return resultSet.wasNull() ? null : #if ($enumeration.typeSafe)${enumeration.name}.#end${enumeration.fromOperationName}(value.${enumeration.literalType.fullyQualifiedName}Value());
#else
#set ($valueAssignment = "($enumeration.literalType.fullyQualifiedName)resultSet.getObject(values[0])")
        final $enumeration.literalType.fullyQualifiedName value = ($enumeration.literalType.fullyQualifiedName)resultSet.getObject(values[0]);
        return resultSet.wasNull() ? null : #if ($enumeration.typeSafe)${enumeration.name}.#end${enumeration.fromOperationName}(value);
#end
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}nullSafeSet(java.sql.PreparedStatement, Object, int)
     */
    public void nullSafeSet(PreparedStatement statement, Object value, int index) throws HibernateException, SQLException
    {
        if (value == null)
        {
            statement.setNull(index, Types.VARCHAR);
        }
        else
        {
#if ($enumeration.literalType.primitive)
#set ($typeName = $enumeration.literalType.wrapperName)
#else
#set ($typeName = $enumeration.literalType.fullyQualifiedName)
#end
#if($typeName == "String" || $typeName == "java.lang.String" || $typeName == "java.lang.Character" || $typeName == "Character")
            statement.setObject(index, String.valueOf(value));
#else
            statement.setObject(index, ${typeName}.valueOf(String.valueOf(value)));
#end
        }
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}replace(Object original, Object target, Object owner)
     */
    public Object replace(Object original, Object target, Object owner)
    {
        return original;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}assemble(java.io.Serializable cached, Object owner)
     */
    public Object assemble(java.io.Serializable cached, Object owner)
    {
        return cached;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}disassemble(Object value)
     */
    public java.io.Serializable disassemble(Object value)
    {
        return (java.io.Serializable)value;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType${esc.hash}hashCode(Object value)
     */
    public int hashCode(Object value)
    {
        return value.hashCode();
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.EnhancedUserType${esc.hash}objectToSQLString(Object object)
     */
    public String objectToSQLString(Object object)
    {
        return String.valueOf((($enumeration.fullyQualifiedName)object).getValue());
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.EnhancedUserType${esc.hash}toXMLString(Object object)
     */
    public String toXMLString(Object object)
    {
        return String.valueOf((($enumeration.fullyQualifiedName)object).getValue());
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.EnhancedUserType${esc.hash}fromXMLString(String string)
     */
    public Object fromXMLString(String string)
    {
#if ($typeName == "java.lang.Character" || $typeName == "Character" || $typeName == "char")
#set ($value = "${typeName}.valueOf(string.charAt(0))")
#elseif ($enumeration.literalType.primitive)
#set ($value = "${typeName}.valueOf(string).${enumeration.literalType.name}Value()")
#else
#set ($value = "${typeName}.valueOf(string)")
#end
        return ${enumeration.fullyQualifiedName}.${enumeration.fromOperationName}($value);
    }
}
#end