// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\MenuBackingBean.java.vsl) DO NOT EDIT!
#set ($className = "MenuBackingBean")
#if ($stringUtils.isNotBlank($managedBeansPackage))
package $managedBeansPackage;
#end

import org.apache.commons.lang.StringUtils;
import java.util.Map;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Backing bean for the navigationStyle "Light"
 */
public class $className {
	
	private boolean menuRendered = true;
	private boolean menuDisabled = false;

	private final Map<String, String> rolesByUseCase = new java.util.HashMap<String, String>();
	private final Map<String, Boolean> renderedByUseCase = new java.util.HashMap<String, Boolean>();

	private static final Log LOG = LogFactory.getLog(${className}.class);
	
	public ${className}() {
	}
	
	public void setRolesByUseCase(Map<String,String> useCaseRoleMap) {
		if ( useCaseRoleMap != null ) {
			rolesByUseCase.putAll(useCaseRoleMap);
		}
	}
	
	public void setRendered(boolean menuRendered) {
		this.menuRendered = menuRendered;
	}

	public boolean isRendered() {
		return this.menuRendered;
	}

	public void setDisabled(boolean menuDisabled) {
		this.menuDisabled = menuDisabled;
	}

	public boolean isDisabled() {
		return this.menuDisabled;
	}
	
	
#foreach($useCase in $useCases)
#if(${useCase.navigationParents.empty})	
#if(!${useCase.navigationChildren.empty})
	
	/**
	* Renders a menu for the use case "${useCase.name}". If security is enabled
	* the menus are enabled basing on the user roles. This menu is usually enabled 
	* for $useCase.allSpringSecRoles
	* set to true to force the rendering, disregarding the role.
	*
	* @param menuRendered
	*          true: renders the menuItem, false: don't render the menuItem 
	*/
	public void set${useCase.controllerAction}Rendered(boolean menuRendered) {
		final String ucName = "${useCase.name}";
		synchronized (this.renderedByUseCase) {
			this.renderedByUseCase.put(ucName, menuRendered);
		}
	}

	public boolean is${useCase.controllerAction}Rendered() {
		return getRendered("${useCase.name}");
	}
	
	private boolean ${useCase.controllerAction}Disabled = false;

	public void set${useCase.controllerAction}Disabled(boolean ${useCase.controllerAction}Disabled) {
		this.${useCase.controllerAction}Disabled = ${useCase.controllerAction}Disabled;
	}

	public boolean is${useCase.controllerAction}Disabled() {
		return this.${useCase.controllerAction}Disabled;
	}


#foreach($child in ${useCase.navigationChildren})
#if(${child.path})
	/**
	* Renders a menu for the use case "${child.name}". If security is enabled
	* the menus are enabled basing on the user roles. This menu is usually enabled 
	* for $child.allSpringSecRoles
	* set to true to force the rendering, disregarding the role.
	*
	* @param menuRendered
	*          true: renders the menuItem, false: don't render the menuItem 
	*/
	public void set${child.controllerAction}Rendered(boolean menuRendered) {
		final String ucName = "${child.name}";
		synchronized (this.renderedByUseCase) {
			this.renderedByUseCase.put(ucName, menuRendered);
		}
	}

	public boolean is${child.controllerAction}Rendered() {
		return getRendered("${child.name}");
	}

	private boolean ${child.controllerAction}Disabled = false;

	public void set${child.controllerAction}Disabled(boolean ${child.controllerAction}Disabled) {
		this.${child.controllerAction}Disabled = ${child.controllerAction}Disabled;
	}

	public boolean is${child.controllerAction}Disabled() {
		return this.${child.controllerAction}Disabled;
	}

#end
#end
#end
#end
#end      

	private boolean getRendered(String ucName) {
		boolean rendered;
		synchronized (this.renderedByUseCase) {
			if (renderedByUseCase.containsKey(ucName)) {
				rendered = renderedByUseCase.get(ucName);
			} else {
				if (rolesByUseCase.containsKey(ucName)) {
					java.util.Collection<Roles> currentRoles = JsfUtils.getRoles();
					String rolesByUc = rolesByUseCase.get(ucName);
					if (StringUtils.isNotBlank(rolesByUc)) {
						String[] roleArr = rolesByUc.split(",");
						rendered = false;
						for (String allowedRole : roleArr) {
							if (StringUtils.isNotBlank(allowedRole)) {
								Roles allowedRoleEnum = Roles
										.valueOf(allowedRole.trim()
												.toUpperCase());
								rendered |= currentRoles
										.contains(allowedRoleEnum);
							}
							if (rendered) {
								break;
							}
						}
						String sep = "";
						if (!rendered) {
							sep = " NOT ";
						}
						final String uname = ${managedBeansPackage}.JsfUtils.getCurrentUserName();
						LOG.debug("Menu for useCase '" + ucName + "'" + sep
								+ " rendered for user " + uname + "." + "Roles of user:"
								+ currentRoles + ". Roles of menu:" + rolesByUc);
					} else {
						rendered = false;
					}

				} else {
					// use case not secured, forbid access. (?)
					rendered = false;
					LOG.debug("Menu for useCase '" + ucName
							+ "' NOT rendered because "
							+ "use case not found in faces-config.");
				}
			}
			renderedByUseCase.put(ucName, rendered);
		}
		return rendered;
	}
}