// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: /remoting/client/AuthenticatingHttpInvokerRequestExecutor.java.vsl in andromda-spring-cartridge.
//
#set ($className = $remoteAuthenticatingHttpInvokerRequestExecutorName)
#set ($generatedFile = "${className}.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end
import org.apache.commons.codec.binary.Base64;

import org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor;

import java.io.IOException;

import java.net.HttpURLConnection;

/**
 * An HttpInvoker "request executor" for Spring Remoting that provides HTTP
 * BASIC authentication information for service invocations.
 *
 * @author Joel Kozikowski
 */
public class $className
    extends SimpleHttpInvokerRequestExecutor
{
    private String username;
    private String password;

    /**
     * Default constructor
     */
    public $className()
    {
        super();
    }

    /**
     * @return password
     */
    public String getPassword()
    {
        return password;
    }

    /**
     * @param passwordIn
     */
    public void setPassword(String passwordIn)
    {
        this.password = passwordIn;
    }

    /**
     * @return username
     */
    public String getUsername()
    {
        return username;
    }

    /**
     * @param usernameIn
     */
    public void setUsername(String usernameIn)
    {
        this.username = usernameIn;
    }

    /**
     * Called every time a HTTP invocation is made. This implementation allows
     * the parent to setup the connection, and then adds an
     * <code>Authorization</code> HTTP header property for BASIC
     * authentication.
     */
    protected void prepareConnection(HttpURLConnection connection, int contentLength)
        throws IOException
    {
        super.prepareConnection(connection, contentLength);
        if (this.getUsername() != null)
        {
            String password = this.getPassword();
            if (password == null)
            {
                password = "";
            }
            final String base64 = this.getUsername() + ":" + password;
            connection.setRequestProperty("Authorization", "Basic "
                + new String(Base64.encodeBase64(base64.getBytes())));
        }
    }
}