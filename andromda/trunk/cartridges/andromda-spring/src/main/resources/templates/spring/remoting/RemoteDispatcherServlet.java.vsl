// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: remoting/RemoteDispatcherServlet.java.vsl in andromda-spring-cartridge.
//
#set ($className = $remoteDispatcherServletName)
#set ($generatedFile = "${className}.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Extends the default org.springframework.web.servlet.DispatcherServlet servlet
 * in order to use the application context available to the generated {@link ${serviceLocatorName})
 * which allows us not to have to specify any context files in the war that will
 * expose the remote services.
 *
 * In order to use this servlet to expose your remote services,
 * just set the following in your web.xml:
 *    <servlet>
 *       <servlet-name>remoting</servlet-name>
 *       <servlet-class>${springTypesPackage}.${className}</servlet-class>
 *       <load-on-startup>1</load-on-startup>
 *    </servlet>
 *
 *   <servlet-mapping>
 *       <servlet-name>remoting</servlet-name>
 *       <url-pattern>/remoting/*</url-pattern>
 *   </servlet-mapping>
 */
public class $className
    extends org.springframework.web.servlet.DispatcherServlet
{
    private static final long serialVersionUID = 1L;

#if ($enableAnnotations)
    @Override
#end
    protected void initStrategies(org.springframework.context.ApplicationContext context)
    {
        super.initStrategies(${serviceLocatorName}.instance().getContext());
    }

#if ($enableAnnotations)
    @Override
#end
    public Class getContextClass()
    {
        return ${remoteWebApplicationContextName}.class;
    }

    /**
     * Not required for Spring 2.5.x.  Do not add @Override
     * since its not required for later Spring versions.
     */
    public boolean isPublishEvents()
    {
        return false;
    }
}
