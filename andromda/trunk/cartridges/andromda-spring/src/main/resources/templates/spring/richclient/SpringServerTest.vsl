#set ($generatedFile = "${service.packagePath}/${service.name}LocalTest.java")
// license-header java merge-point
// Generated by: richclient/SpringServerTest.vsl in andromda-spring-cartridge.
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

#if ($serviceSecurity)
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.GrantedAuthorityImpl;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
#end
import org.springframework.test.AbstractDependencyInjectionSpringContextTests;

import ${service.packageName}.${service.name};
import ${springTypesPackage}.${serviceLocatorName};

/**
* A unit test for exercising the methods of ${service.name}. This unit test
* makes local calls, bypassing remote invocations of service methods.
*/
public class ${service.name}LocalTest
    extends AbstractDependencyInjectionSpringContextTests
{

#if ($serviceSecurity)
    private Authentication mockUser;

#end
    protected void onSetUp()
        throws Exception
    {
        super.onSetUp();
#if ($serviceSecurity)
        // $toDoTag Specify which roles the "test user" will have for this test
        GrantedAuthority[] mockAuthorities =
            {
                new GrantedAuthorityImpl("ROLE_SomeRole1"),
                new GrantedAuthorityImpl("ROLE_SomeRole2"),
                new GrantedAuthorityImpl("ROLE_SomeRole3")
            };
        mockUser = new UsernamePasswordAuthenticationToken("joeuser", "12345", mockAuthorities);
#end
    }

#foreach ($operation in $service.operations)
    public void test${stringUtils.capitalise($operation.name)}()
    {
        $service.name testService = ${serviceLocatorName}.instance().get${service.name}();
        assertNotNull(testService);

#if ($serviceSecurity)
        SecurityContextHolder.getContext().setAuthentication(mockUser);

#end
        // $toDoTag Write test code for ${service.name}::${operation.name}() server test.
    }

#end
    /**
     * Get the configuration locations for the unit test for ${service.name}.$operation.name.
     * @return new String[]
     */
    protected String[] getConfigLocations()
    {
        // $toDoTag ${service.name}LocalTest test configuration files (if any), should be listed inside the brackets...
        return new String[] { };
    }

    /**
     * Run the unit test for ${service.name}.$operation.name from the command line.
     * @param args
     */
    public static void main(String[] args)
    {
        ${serviceLocatorName}.instance().init("$serverTestBeanRefFactory");
        junit.textui.TestRunner.run(${service.name}LocalTest.class);
    }
}