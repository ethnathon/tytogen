#if ($recordType.equalsIgnoreCase("dao"))
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName
{
    private ${serviceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * The prefix used for all bean ids.
     */
    public static final String BEAN_PREFIX = "${beanNamePrefix}";

    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private static final ${serviceLocatorName} instance = new ${serviceLocatorName}();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final $serviceLocatorName instance()
    {
        return instance;
    }

    /**
     * The bean factory reference instance.
     */
    private org.springframework.beans.factory.access.BeanFactoryReference beanFactoryReference;

    /**
     * The bean factory reference location.
     */
    private String beanFactoryReferenceLocation;

    /**
     * The bean factory reference id.
     */
    private String beanRefFactoryReferenceId;

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocationIn the location of the beanRefFactory reference.
     * @param beanRefFactoryReferenceIdIn the id of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocationIn, final String beanRefFactoryReferenceIdIn)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocationIn;
        this.beanRefFactoryReferenceId = beanRefFactoryReferenceIdIn;
        this.beanFactoryReference = null;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocationIn the location of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocationIn)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocationIn;
        this.beanFactoryReference = null;
    }

#if($stringUtils.isNotBlank($serviceLocatorDefaultFactoryId))
#set ($factoryId = $serviceLocatorDefaultFactoryId)
#elseif($ejbsEnabled)
#set ($factoryId = $beanRefFactoryEjbId)
#else
#set ($factoryId = $beanRefFactoryId)
#end
    /**
     * The default bean reference factory location.
     */
    private final String DEFAULT_BEAN_REFERENCE_LOCATION = "$beanRefFactory";

    /**
     * The default bean reference factory ID, referencing $factoryId.
     */
    private final String DEFAULT_BEAN_REFERENCE_ID = "$factoryId";

    /**
     * Gets the Spring ApplicationContext.
     * @return beanFactoryReference.getFactory()
     */
    public synchronized org.springframework.context.ApplicationContext getContext()
    {
        if (this.beanFactoryReference == null)
        {
            if (this.beanFactoryReferenceLocation == null)
            {
                this.beanFactoryReferenceLocation = this.DEFAULT_BEAN_REFERENCE_LOCATION;
            }
            if (this.beanRefFactoryReferenceId == null)
            {
                this.beanRefFactoryReferenceId = this.DEFAULT_BEAN_REFERENCE_ID;
            }
            org.springframework.beans.factory.access.BeanFactoryLocator beanFactoryLocator =
                org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance(
                    this.beanFactoryReferenceLocation);
            this.beanFactoryReference = beanFactoryLocator.useBeanFactory(this.beanRefFactoryReferenceId);
        }
        return (org.springframework.context.ApplicationContext)this.beanFactoryReference.getFactory();
    }

    /**
     * Shuts down the ServiceLocator and releases any used resources.
     */
    public synchronized void shutdown()
    {
        ((org.springframework.context.support.AbstractApplicationContext)this.getContext()).close();
        if (this.beanFactoryReference != null)
        {
            this.beanFactoryReference.release();
            this.beanFactoryReference = null;
        }
    }
#foreach ($service in $services)

    /**
     * Gets an instance of {@link $service.fullyQualifiedName}.
     * @return ${service.name} from getContext().getBean("$service.beanName")
     */
    public final $service.fullyQualifiedName get${service.name}()
    {
        return ($service.fullyQualifiedName)
            getContext().getBean("$service.beanName");
    }
#end
#foreach ($manageable in $manageables)

    /**
     * Gets a manageable instance of {@link $manageable.fullyQualifiedManageableServiceName}.
     * @return ${manageable.name} from getContext().getBean("$manageable.manageableServiceName")
     */
    public final $manageable.fullyQualifiedManageableServiceName get${manageable.manageableServiceName}()
    {
        return ($manageable.fullyQualifiedManageableServiceName)
            getContext().getBean("$manageable.manageableServiceName");
    }
#end

    /**
     * Gets an instance of the given service.
     * @param serviceName
     * @return getContext().getBean(BEAN_PREFIX + serviceName)
     */
    public final Object getService(String serviceName)
    {
        return getContext().getBean(BEAN_PREFIX + serviceName);
    }
}
#end