<?xml version="1.0" encoding="UTF-8" ?>
<profile>
    <documentation>
        <p>
             Dependencies can be used between Services and Entities, they
             won't need any stereotype assigned to them. These dependencies
             are used to produce entity references (from a entity or service)
             in the Spring applicationContext.xml and within
             the Spring base classes (i.e. DaoBase and ServiceBase),
             or to produce service references (from another service)
             in the Spring applicationContext.xml and within
             the ServiceBase classes.
         </p>
         <p>
             Entity business operations can be set to <code>classifier</code> scope
             instead of the usual <code>instance</code> scope. By doing so they
             will be generated into the corresponding DAO for that entity instead
             of the entity implementation class.
         </p>
         <p>
             Entity query operations (i.e. finders) can be denoted by setting the
             query flag on the modeled operation to true
             (they do not require any stereotypes).
         </p>
         <p>
             Actors represent roles within your model.  To designate that a role
             has access to a given service you must draw a dependency from an Actor
             to the <a href="Service"><![CDATA[<<Service>>]]></a>.  To designate the
             role has access to to a given operation, you must draw a dependency from
             an Actor to the operation.
         </p>
    </documentation>
    <elements>
        <elementGroup name="Stereotypes">
            <element name="ENTITY">
                <documentation>
                    See the documentation from the
                    <a href="../andromda-hibernate-cartridge/profile.html#Entity">Hibernate cartridge</a>.
                </documentation>
                <value>Entity</value>
                <appliedOnElement>class</appliedOnElement>
            </element>
            <element name="SERVICE">
                <documentation>
                    Either denotes a class is representing an EJB session bean or a Spring service. This service
                    is supposed to be used as a facade for a set of entities. If you want to use Spring services
                    instead of the default EJB session beans then you will need to remove the
                    <code>session-ejbs</code> outlet from the spring cartridge's namespace in the
                    <a href="../configuration.html">andromda.xml</a> configuration.
                </documentation>
                <value>Service</value>
                <appliedOnElement>class</appliedOnElement>
            </element>
            <element name="POST_CONSTRUCT">
                <documentation>
                    Used to tag an Service init-method.
                </documentation>
                <value>PostConstruct</value>
                <appliedOnElement>Service operation</appliedOnElement>
            </element>
            <element name="PRE_DESTROY">
                <documentation>
                    Used to tag an Service destroy-method.
                </documentation>
                <value>PreDestroy</value>
                <appliedOnElement>Service operation</appliedOnElement>
            </element>
        </elementGroup>
        <elementGroup name="Tagged Values">
            <documentation>
                The tagged values which apply to the Spring namespace.
            </documentation>
            <element name="EJB_TRANSACTION_TYPE">
                <documentation>
                    Defines an EJB transaction type for the service operation (when wrapped
                    by EJBs)
                </documentation>
                <value>andromda_ejb_transaction_type</value>
                <appliedOnElement>Service Operation</appliedOnElement>
                <allowedValues>
                    <value>NotSupported</value>
                    <value>Supports</value>
                    <value>Required</value>
                    <value>RequiresNew</value>
                    <value>Mandatory</value>
                    <value>Never</value>
                </allowedValues>
            </element>
            <element name="EJB_VIEW_TYPE">
                <documentation>
                    Defines an EJB service's view type (when Spring services are wrapped by
                    EJBs).
                </documentation>
                <value>andromda_ejb_viewType</value>
                <appliedOnElement>Service</appliedOnElement>
                <allowedValues>
                    <value>local</value>
                    <value>remote</value>
                    <value>both</value>
                </allowedValues>
            </element>
            <element name="TRANSACTION_TYPE">
                <documentation>
                    Defines a Spring transaction type for the service operation
                    (when <strong>NOT</strong> wrapped by EJBs). Using this tagged value on a service
                    will enable it on all of its operations. If this tagged value is present on such a
                    service operation it will take priority over any transaction declaration in a
                    broader scope such as its service or the global namespace.
                </documentation>
                <value>andromda_spring_transaction_type</value>
                <appliedOnElement>Service or Service Operation</appliedOnElement>
                <allowedValues>
                    <value>PROPAGATION_NEVER</value>
                    <value>PROPAGATION_NESTED</value>
                    <value>PROPAGATION_MANDATORY</value>
                    <value>PROPAGATION_REQUIRED</value>
                    <value>PROPAGATION_REQUIRES_NEW</value>
                    <value>PROPAGATION_SUPPORTS</value>
                    <value>PROPAGATION_NOT_SUPPORTED</value>
                </allowedValues>
            </element>
            <element name="HIBERNATE_QUERY">
                <documentation>
                    Defines a hibernate query expression. Note that it's encouraged
                    to model your query body as an OCL constraint (instead of using
                    this tagged value).
                </documentation>
                <value>andromda_hibernate_query</value>
                <appliedOnElement>An Entity operation marked as a
                    <code>query</code>.
                </appliedOnElement>
            </element>
            <element name="HIBERNATE_USE_NAMED_PARAMETERS">
                <documentation>
                    Defines whether the marked finder will use named parameters or not.
                </documentation>
                <value>andromda_hibernate_query_useNamedParameters</value>
                <appliedOnElement>An Entity operation marked as a
                    <code>query</code>.
                </appliedOnElement>
                <allowedValues>
                    <value>true</value>
                    <value>false</value>
                </allowedValues>
            </element>
            <element name="HIBERNATE_INHERITANCE">
                <documentation></documentation>
                <value>andromda_hibernate_inheritance</value>
            </element>
            <element name="SPRING_SERVICE_REMOTING_TYPE">
                <documentation>
                    Services marked with this stereotype will be exported using Spring's remoting
                    architecture. Please note that in order to be able to use
                    <a href="http://lingo.codehaus.org/">Lingo remoting</a>, you need to use Spring 2.0.
                </documentation>
                <value>andromda_spring_service_remoting_type</value>
                <appliedOnElement><![CDATA[<<Service>>]]></appliedOnElement>
                <allowedValues>
                    <value>none</value>
                    <value>rmi</value>
                    <value>httpinvoker</value>
                    <value>burlap</value>
                    <value>hessian</value>
                    <value>lingo></value>
                </allowedValues>
            </element>
            <element name="SPRING_SERVICE_REMOTE_PORT">
                <documentation>
                    Sets the port this service will be exported on. You must also tag the
                    service using <a href="#andromda_spring_service_remote_port">andromda_spring_service_remote_port</a>.
                </documentation>
                <value>andromda_spring_service_remote_port</value>
                <appliedOnElement><![CDATA[<<Service>>]]></appliedOnElement>
            </element>
            <element name="SPRING_SERVICE_INTERCEPTORS">
                <documentation>
                    Sets a list of additional interceptors to be applied to the service's ProxyBeanFactory declaration.
                    They will be listed after the serviceSecurityInterceptor, serviceTransactionInterceptor and
                    hibernateInterceptor if present.
                </documentation>
                <value>andromda_spring_service_interceptors</value>
                <appliedOnElement><![CDATA[<<Service>>]]></appliedOnElement>
            </element>
            <element name="SPRING_SERVICE_CONFIG_ONLY">
                <documentation>
                    Set this tagged value to true in order to suppress generation of the bean class. The bean will be
                    listed in the applicationContext.xml files, however. The idea behind this tagged value is to enable
                    users to use Spring beans that are contained in Jar files,
                    e.g. <code>org.springframework.security.authentication.rcp.RemoteAuthenticationManager</code>.
                </documentation>
                <value>andromda_spring_service_config_only</value>
                <appliedOnElement><![CDATA[<<Service>>]]></appliedOnElement>
                <allowedValues>
                    <value>true</value>
                    <value>false</value>
                </allowedValues>
            </element>
            <element name="SPRING_SERVICE_PRIVATE">
                <documentation>
                    Set this tagged value to true in order to define the service as private. Private services are not 
                    available through the ServiceLocator, are not exposed via remoting and their methods are not 
                    intercepted by neither the transaction manager nor the security interceptor. The idea behind this 
                    tagged value is to enable users to create services which could be used only via dependencies, not by 
                    standalone instantiation.
                </documentation>
                <value>andromda_service_private</value>
                <appliedOnElement><![CDATA[<<Service>>]]></appliedOnElement>
                <allowedValues>
                    <value>true</value>
                    <value>false</value>
                </allowedValues>
            </element>
            <element name="HIBERNATE_CRITERIA_NULLABLE">
                <documentation>
                    If this tagged value is set to <code>true</code>, the tagged attribute will be considered in the
                    search even if it is <code>null</code>. Use this feature to query entities that have attributes
                    that may be <code>NULL</code> (in the sense of SQL).
                </documentation>
                <value>andromda_hibernate_criteria_nullable</value>
                <appliedOnElement>an attribute of a <![CDATA[<<Criteria>>]]> class</appliedOnElement>
                <allowedValues>
                    <value>true</value>
                    <value>false</value>
                </allowedValues>
            </element>
            <element name="HIBERNATE_CRITERIA_ATTRIBUTE">
                <documentation>
                    Sets the name of the attribute on the hibernate entity that should be added to a criteria
                    search. If the attribute you want to search for is not in the entity itself, but rather in
                    an associated class, you can use a fully qualified name here. Assume you have two entites
                    <code>Person</code> and <code>Address</code>, the address being referenced as a one-to-one
                    relationship with the role name <code>homeAddress</code> and the address having an attribute
                    named "city". If you want to retrieve all people living in Hamburg, simply set the value of
                    this tagged value to <code>homeAddress.city</code>.
                    If you omit this tagged value, the name of the attribute in the criteria class will be used.
                </documentation>
                <value>andromda_hibernate_criteria_attribute</value>
                <appliedOnElement>an attribute of a <![CDATA[<<Criteria>>]]> class</appliedOnElement>
            </element>
            <element name="HIBERNATE_CRITERIA_COMPARATOR">
                <documentation>
                    Using this tagged value to define the logical condition for the underlying attribute in the query is set.
                </documentation>
                <value>andromda_hibernate_criteria_comparator</value>
                <appliedOnElement>an attribute of a <![CDATA[<<Criteria>>]]> class</appliedOnElement>
                <allowedValues>
                    <value>like</value>
                    <value>insensitive_like</value>
                    <value>equal</value>
                    <value>greater</value>
                    <value>greater_equal</value>
                    <value>less</value>
                    <value>less_equal</value>
                    <value>in</value>
                    <value>not_equal</value>
                </allowedValues>
            </element>
            <element name="HIBERNATE_CRITERIA_MATCHMODE">
                <documentation>
                    Use this value to denote the hibernate matchmode to be used for comparing strings.
                </documentation>
                <value>andromda_hibernate_criteria_matchmode</value>
                <appliedOnElement>an attribute of a <![CDATA[<<Criteria>>]]> class</appliedOnElement>
                <allowedValues>
                    <value>anywhere</value>
                    <value>start</value>
                    <value>end</value>
                    <value>exact</value>
                </allowedValues>
            </element>
            <element name="HIBERNATE_CRITERIA_ORDER_DIRECTION">
                <documentation>
                    Using this tagged value, you can determine the sort order of the result set.
                </documentation>
                <value>andromda_hibernate_criteria_order_direction</value>
                <appliedOnElement>an attribute of a <![CDATA[<<Criteria>>]]> class</appliedOnElement>
                <allowedValues>
                    <value>ascending</value>
                    <value>descending</value>
                </allowedValues>
            </element>
            <element name="HIBERNATE_CRITERIA_ORDER_RELEVANCE">
                <documentation>
                    Use this tagged value to determine the relevance of this ordering. You may enter any
                    integer value. The smaller the value, the more relevant the ordering will be.
                </documentation>
                <value>andromda_hibernate_criteria_order_relevance</value>
                <appliedOnElement>an attribute of a <![CDATA[<<Criteria>>]]> class</appliedOnElement>
                <allowedValues>
                    <value>an integer</value>
                </allowedValues>
            </element>
            <element name="ACTIVEMQ_OPTIMIZE_ACKNOWLEDGE">
                <documentation>
                    Use this tagged value to set the sessop flag on an incoming
                    connection when using ActiveMQ.
                </documentation>
                <value>andromda_activemq_optimizeAcknowledge</value>
                <appliedOnElement>A transition going into a service operation from a messaging destination</appliedOnElement>
                <allowedValues>
                    <value>true</value>
                    <value>false</value>
                </allowedValues>
            </element>
            <element name="MESSAGING_SESSION_ACKNOWLEDGE_MODE">
                <documentation>
                    Use this tagged value to set the session acknowledge mode.
                </documentation>
                <value>andromda_messaging_sessionAcknowledgeMode</value>
                <appliedOnElement>A transition going into a service operation from a messaging destination</appliedOnElement>
                <allowedValues>
                    <value>AUTO_ACKNOWLEDGE</value>
                    <value>CLIENT_ACKNOWLEDGE</value>
                    <value>DUPS_OK_ACKNOWLEDGE</value>
                </allowedValues>
            </element>
        </elementGroup>
        <elementGroup name="Constants">
            <documentation>
                Values of constants used in the Spring namespace.
            </documentation>
            <element name="LIKE_COMPARATOR">
                <documentation></documentation>
                <value>like</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="INSENSITIVE_LIKE_COMPARATOR">
                <documentation></documentation>
                <value>insensitive_like</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="EQUAL_COMPARATOR">
                <documentation></documentation>
                <value>equal</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="GREATER_THAN_OR_EQUAL_COMPARATOR">
                <documentation></documentation>
                <value>greater_equal</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="GREATER_THAN_COMPARATOR">
                <documentation></documentation>
                <value>greater</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="LESS_THAN_OR_EQUAL_COMPARATOR">
                <documentation></documentation>
                <value>less_equal</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="LESS_THAN_COMPARATOR">
                <documentation></documentation>
                <value>less</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="IN_COMPARATOR">
                <documentation></documentation>
                <value>in</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="NOT_EQUAL_COMPARATOR">
                <documentation></documentation>
                <value>not_equal</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="MATCHMODE_ANYWHERE">
                <documentation></documentation>
                <value>anywhere</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="MATCHMODE_END">
                <documentation></documentation>
                <value>end</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="MATCHMODE_EXACT">
                <documentation></documentation>
                <value>exact</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="MATCHMODE_START">
                <documentation></documentation>
                <value>start</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="ORDER_ASCENDING">
                <documentation></documentation>
                <value>ascending</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="ORDER_DESCENDING">
                <documentation></documentation>
                <value>descending</value>
                <appliedOnElement></appliedOnElement>
                <allowedValues>
                    <value></value>
                </allowedValues>
            </element>
            <element name="MANAGEABLE_MAXIMUM_LIST_SIZE">
                <documentation>
                    The maximum number of rows to fetch from the database in a single operation. Tune this parameter
                    to avoid downloading thousands of rows each time, most of the time the user will want to use
                    the search facility to refine the result set
                </documentation>
                <value>andromda_manageable_table_maxlistsize</value>
                <appliedOnElement>A class with the <![CDATA[<<Manageable>>]]> stereotype</appliedOnElement>
                <allowedValues>
                    <value>a strictly positive integer</value>
                    <value default="true">250</value>
                </allowedValues>
            </element>
            <element name="MANAGEABLE_DISPLAY_NAME">
                <documentation>
                    The column representing this entity,by default the first <![CDATA[<<Unique>>]]> attribute found
                    is taken but you might want to specify another column yourself. This value is used when one entity
                    has a foreign key to another one and you want to select the value of this foreign key
                    from a combobox and you would like to see a more meaningful label for each option, if no
                    <![CDATA[<<Unique>>]]> attribute is found the identifier is used, which isn't very helpful.
                </documentation>
                <value>andromda_manageable_table_displayname</value>
                <appliedOnElement>A class with the <![CDATA[<<Manageable>>]]> stereotype</appliedOnElement>
                <allowedValues>
                    <value>any column name present in this entity</value>
                    <value default="true">the name of the identifier column</value>
                </allowedValues>
            </element>
        </elementGroup>
    </elements>
</profile>