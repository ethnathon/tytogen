#if ($umlUtils.shouldOutput($service))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA
 *
 * TEMPLATE:    jaxws/WebService${seiSuffix}ImplTest.vsl in andromda-webservices-cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import junit.framework.TestCase;
import junit.textui.TestRunner;

/**
 * WebService Service Delegate Test for the $service.name service.
$service.getDocumentation(" * ")
 */

public class ${service.name}${seiSuffix}ImplTest extends TestCase
{
    /**
     * Constructor
     * @param name test case name
     */
    public ${service.name}${seiSuffix}ImplTest(String name)
    {
        super(name);
    }

    /**
     * No arg Constructor. Delegates to constructor(String) with test case name
     */
    public ${service.name}${seiSuffix}ImplTest()
    {
        super("$service.name");
    }

    /**
     * @see junit.framework.TestCase#setUp()
     */
#if ($enableAnnotations)
    @Override
#end
    protected void setUp() throws Exception
    {
        super.setUp();
    }

    /**
     * @see junit.framework.TestCase#tearDown()
     */
#if ($enableAnnotations)
    @Override
#end
    protected void tearDown() throws Exception
    {
        super.tearDown();
    }

#foreach ( $operation in $service.allowedOperations)
#if ($operation.visibility.equals("public") || $operation.visibility.equals(""))
#if (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
#end
    /**
#set ($pound="#")
     * Test method for {@link ${service.fullyQualifiedName}${seiSuffix}Impl$pound${service.name}${seiSuffix}Impl()}.
#foreach ($constraint in $operation.constraints)
     * CONSTRAINT:  ${constraint.name}: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end ${constraint.body}
#end
     */
    public void test${service.name}${seiSuffix}Impl$stringUtils.capitalize($operation.operationName)()
    {
        // TestCase.setUp and tearDown methods for each individual service method test
#set ($inputType = "${service.packageName}.$stringUtils.capitalize($operation.operationName)")
        ${inputType}Impl.${operation.name}SetUp();
#if (!$operation.arguments.empty)
        $inputType ${operation.operationName}Input = ${inputType}Impl.${operation.name}CreateInput();
#end
        ${service.name}${seiSuffix}Impl delegate = new ${service.name}${seiSuffix}Impl();
        System.out.println("Invoking ${service.name}${seiSuffix}Impl.${operation.operationName}#if ($operation.arguments.empty)"#else with " + ${operation.operationName}Input#end);
#if (!$operation.exceptions.empty)
#set ($indent = "    ")
        try
        {
#else
#set ($indent = "")
#end
$indent            #if ($operation.restAtom)org.apache.abdera.model.Feed rtn =#elseif ($operation.returnTypePresent)$returnType rtn =#end delegate.${operation.name}(
#set ($comma = "")
#foreach ($argument in $operation.arguments)
##      ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
$indent            ${comma} ${operation.operationName}Input.${argument.getterName}()  // $argument.getterSetterTypeName
#set ($comma = ",")
#end
#if ($service.hasStereotype("WSCustomHeader"))
#set ($serviceElementName = $service.findTaggedValue("andromda_wsdl_header_element"))
#set ($serviceNamespace = $service.findTaggedValue("andromda_header_namespace"))
#set ($serviceClassName =  "${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName")
$indent            ${comma} new ${serviceClassName}()  // WSCustomHeader serviceElementName
#set ($comma = ",")
#end
#if ($service.hasStereotype("WSSecurity"))
#set ($securityElementName = $service.findTaggedValue("andromda_wsdl_security_element"))
#set ($securityNamespace = $service.findTaggedValue("andromda_security_namespace"))
#set ($securityClassName = "${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName")
       ${comma} new ${securityClassName}()  // WSSecurity securityElementName
#end$indent        );
$indent        System.out.println("${service.name}${seiSuffix}Impl.${operation.name}"#if ($operation.returnTypePresent) + " returned " + rtn#end);
#if (!$operation.exceptions.empty)
        }
        catch (Exception ex)
        {
            System.out.println("${service.name}${seiSuffix}Impl.${operation.name}" + " threw exception " + ex);
            fail(ex.toString());
        }
#end
        ${inputType}Impl.${operation.name}TearDown();
    }

#end
#end
    /**
     * main() method to run the test with the textual test runner.
     * @param args Not used
     */
    public static void main(final String[] args)
    {
        TestRunner.run(${service.name}${seiSuffix}ImplTest.class);
    }
}

#end
