<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jaxrs="http://cxf.apache.org/jaxrs"
    xmlns:jaxws="http://cxf.apache.org/jaxws"
    xmlns:cxf="http://cxf.apache.org/core"
    xsi:schemaLocation="http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
    <!-- Generated by andromda-webservice cartridge (cxf/applicationContext-CXF.vsl) on $webServiceUtils.date -->
    <!-- See https://cwiki.apache.org/confluence/display/CXF20DOC/Configuration -->
    <!-- Spring configuration referenced by web.xml through
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext-CXF.xml</param-value>
    </context-param> -->

#set ($cxf24=$cxfVersion.substring(0,2).compareTo("2.4")<0)
    <!-- Load CXF Spring configuration files from cxf runtime. Comment out unneeded extensions -->
    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
#if ($cxf24)
    <!-- CXF 2.4.x no longer requires the cxf-extension-* declarations -->
#end
    <import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
    #if ($cxf24 || !$service.hasStereotype("WSAddressing"))<!--import#else<import#end
 resource="classpath:META-INF/cxf/cxf-extension-addr.xml"#if ($cxf24 || !$service.hasStereotype("WSAddressing"))/-->#else/>#end

    <!--import resource="classpath:META-INF/cxf/cxf-extension-http.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-http-binding.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-http-jetty.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-javascript-client.xml"/-->
#if ($cxf24)    <!--#end
    <import resource="classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-jaxws.xml"/>
#if ($cxf24)-->#end
    <!--import resource="classpath:META-INF/cxf/cxf-extension-jms.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-local.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-management.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-object-binding.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-policy.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-rm.xml"/-->
#if ($cxf24)    <!--#end
    <import resource="classpath:META-INF/cxf/cxf-extension-xml.xml"/>
#if ($cxf24)-->#end
#if ($service.hasStereotype("WSSecurity"))
    <import resource="classpath:META-INF/cxf/cxf-extension-ws-security.xml"/>
#else
    <!--import resource="classpath:META-INF/cxf/cxf-extension-ws-security.xml"/-->
#end

#set ($jax="jaxws")
#set ($atom=false)
    <!-- $jax:executor  A Java executor which will be used for the service. This can be supplied using the Spring <bean class="MyExecutor"/> syntax.
    $jax:inInterceptors  The incoming interceptors for this endpoint. A list of <bean>s or <ref>s.
    $jax:inFaultInterceptors  The incoming fault interceptors for this endpoint. A list of <bean>s or <ref>s.
    $jax:outInterceptors  The outgoing interceptors for this endpoint. A list of <bean>s or <ref>s.
    $jax:outFaultInterceptors  The outgoing fault interceptors for this endpoint. A list of <bean>s or <ref>s.
    $jax:properties  A properties map which should be supplied to the JAX-WS endpoint. See below.
    $jax:dataBinding  You can specify the which DataBinding will be use in the endpoint , This can be supplied using the Spring <bean class="MyDataBinding"/> syntax.
    $jax:binding  You can specify the BindingFactory for this endpoint to use. This can be supplied using the Spring <bean class="MyBindingFactory"/> syntax.
    $jax:features  The features that hold the interceptors for this endpoint. A list of <bean>s or <ref>s
    $jax:invoker  The invoker which will be supplied to this endpoint. This can be supplied using the Spring <bean class="MyInvoker"/> syntax.
    $jax:schemaLocations  The schema locations for endpoint to use. A list of <schemaLocation>s
    $jax:serviceFactory  The service factory for this endpoint to use. This can be supplied using the Spring <bean class="MyServiceFactory"/> syntax
    -->

    <!-- Service endpoints for every service. Appended to CXF Servlet URL configured in web.xml, typically /$servicesPath/* -->

#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
#if ($service.restCount>0)
#set ($jax="jaxrs")
    <!-- Service from ${service.fullyQualifiedName} -->
    <jaxrs:server id="${service.name}" address="/">
        <jaxrs:serviceBeans>
            <bean class="${service.fullyQualifiedName}${seiSuffix}Impl" />
        </jaxrs:serviceBeans>
#if ($service.restAtom)
#set ($atom=true)
        <!-- Register custom providers if used in REST Services -->
        <jaxrs:providers>
            <ref bean="atomFeedProvider"/>
        </jaxrs:providers>
#else
        <!-- Register custom providers if used in REST Services>
        <jaxrs:providers>
            <ref bean="atomFeedProvider"/>
        </jaxrs:providers -->
#end
    </jaxrs:server>
#end
#end
#end
    <!-- Providers loaded by default: JSON, JAXBElement, BinaryData, Source, FormEncoding, PrimitiveText, Multipart, WebApplicationException -->
    <!--bean id="configurableProvider" class="org.apache.cxf.jaxrs.provider.AbstractConfigurableProvider"/-->
    <!--bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.AbstractJAXBProvider"/-->
    <!--bean id="atomEntryProvider" class="org.apache.cxf.jaxrs.provider.AtomEntryProvider"/-->
#if ($atom)
    <bean id="atomFeedProvider" class="org.apache.cxf.jaxrs.provider.AtomFeedProvider"/>
#else
    <!--bean id="atomFeedProvider" class="org.apache.cxf.jaxrs.provider.AtomFeedProvider"/-->
#end
    <!--bean id="formEncodingProvider" class="org.apache.cxf.jaxrs.provider.FormEncodingProvider"/-->
    <!--bean id="beansElementProvider" class="org.apache.cxf.jaxrs.provider.XMLBeansElementProvider"/-->
    <!--bean id="beansJSONProvider" class="org.apache.cxf.jaxrs.provider.XMLBeansJSONProvider"/-->
    <!--bean id="BeanStreamProvider" class="org.apache.cxf.jaxrs.provider.XMLBeanStreamSerializer"/-->
    <!--bean id="xPathProvider" class="org.apache.cxf.jaxrs.provider.XPathProvider"/-->
    <!--bean id="xsltJaxbProvider" class="org.apache.cxf.jaxrs.provider.XSLTJaxbProvider"/-->

    <!-- See http://cxf.apache.org/docs/jax-ws-configuration.html -->
#foreach ($service in $services)
#if ($umlUtils.shouldOutput($service))
    <!-- Service from ${service.fullyQualifiedName} -->
#if ($service.restCount<$service.allowedOperations.size())
#set ($jax="jaxws")
    <jaxws:endpoint id="${service.name}${seiSuffix}"
        name="${service.name}${seiSuffix}"
        address="/${service.name}"
        implementor="${service.fullyQualifiedName}${seiSuffix}Impl">
        <!--endpointName="e:${service.name}"
        serviceName="s:${service.name}"
        xmlns:e="http://service.jaxws.cxf.apache.org/endpoint"
        xmlns:s="http://service.jaxws.cxf.apache.org/service"
        wsdlLocation="WEB-INF/wsdl/${service.name}.wsdl"-->
#if ($service.hasStereotype("WSAddressing"))
        <!-- TODO Implement WSAddr client test code -->
        <!--jaxws:features>
            <wsa:addressing xmlns:wsa="http://cxf.apache.org/ws/addressing"/>
        </jaxws:features-->
#end
        <jaxws:properties>
            <entry key="schema-validation-enabled" value="$validateSchema" />
#if ($stringUtils.isNotEmpty($customValidator))
            <entry key="jaxb-validation-event-handler" value-ref="validator"/>
#end
        </jaxws:properties>
    </jaxws:endpoint>
#end
#end
#end
    <!-- Can add these additional properties to each jaxws:endpoint -->
    <!--$jax:inInterceptors>
      <bean class="com.acme.SomeInterceptor"/>
      <ref bean="anotherInterceptor"/>
    </$jax:inInterceptor>
    <$jax:properties>
      <entry key="mtom-enabled" value="true"/>
    </$jax:properties-->

#if ($stringUtils.isNotEmpty($customValidator))
    <!-- Referencing the class from the property key doesn't work -->
    <bean id="validator" class="$customValidator"/>

#end
    <!--
    <bean id="anotherInterceptor" class="com.acme.SomeInterceptor"/>
    -->

    <!-- Spring custom inline invoker -->
    <!--
    <jaxws:endpoint id="inlineInvoker" address="http://${webserviceHost}:${webservicePort}/simpleWithAddress">
      <jaxws:implementor>
        <bean class="org.apache.hello_world_soap_http.GreeterImpl"/>
      </jaxws:implementor>
      <jaxws:invoker>
        <bean class="org.apache.cxf.jaxws.spring.NullInvoker"/>
      </jaxws:invoker>
    </jaxws:endpoint>
    -->

    <!-- Spring message logging -->
    <!--
    <bean id="logInbound" class="org.apache.cxf.interceptor.LoggingInInterceptor"/>
    <bean id="logOutbound" class="org.apache.cxf.interceptor.LoggingOutInterceptor"/>
    -->

    <!-- Spring message logging using custom CXF beans. All require logInbound and logOutbound -->
    <!--
    <bean id="cxf" class="org.apache.cxf.bus.CXFBusImpl">
        <property name="inInterceptors"><list>
            <ref bean="logInbound"/>
        </list></property>
        <property name="outInterceptors"><list>
            <ref bean="logOutbound"/>
        </list></property>
        <property name="outFaultInterceptors"><list>
            <ref bean="logOutbound"/>
        </list></property>
    </bean>
    -->
    <!-- Spring message logging using custom CXF beans -->
    <!--
    <cxf:bus>
        <cxf:inInterceptors>
            <ref bean="logInbound"/>
        </cxf:inInterceptors>
        <cxf:outInterceptors>
            <ref bean="logOutbound"/>
        </cxf:outInterceptors>
        <cxf:inFaultInterceptors>
            <ref bean="logOutbound"/>
        </cxf:inFaultInterceptors>
    </cxf:bus>
    -->
    <!-- Spring message logging using the Spring logging feature. No interceptor configuration needed. -->
    <!-- Comment out if you don't want logging for each message -->
    <cxf:bus>
        <cxf:features>
            <cxf:logging/>
        </cxf:features>
    </cxf:bus>

    <!--jaxrs:server>
        <jaxrs:features>
             <cxf:logging/>
        </jaxrs:features>
    <jaxrs:server-->

</beans>
