#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
<?xml version="1.0" encoding="$xmlEncoding"?>
<!-- Generated by andromda-webservice cartridge (jaxws/jaxws-wsdl.vsl) on $webServiceUtils.date -->
#parse("templates/webservice/Globals.vm")
#set ($namespace="$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end")
##    <!-- $defaultParameterStyle ${service.packageName} $extensionInheritanceDisabled -->
<wsdl:definitions
    name="${service.name}"
    targetNamespace="http://$namespace"
    xmlns:${service.namespacePrefix}="http://$namespace"
##    targetNamespace="$service.package.namespace"
##    xmlns:${service.namespacePrefix}="$service.package.namespace"
#if ($defaultParameterStyle.equalsIgnoreCase("BARE"))
## Abbreviations for all namespcaes referenced by wsdl operations
#set ($schemaTypes = $service.typeMappingElements)
#set ($pkgRefs = $webServiceUtils.getPackageReferences($service, $schemaTypes, $service.packageName, $extensionInheritanceDisabled))
#else
#set ($pkgRefs = $webServiceUtils.getPackageReferences($service, null, $service.packageName, $extensionInheritanceDisabled))
#end
#set ($exceptionRefs = $webServiceUtils.getExceptionReferences($service.package))
##    xmlns:$webServiceUtils.getPkgAbbr($service.package)="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end"
#foreach ($pkgRef in $exceptionRefs)
    xmlns:$webServiceUtils.getPkgAbbr($pkgRef)="http://$webServiceUtils.reversePackage($pkgRef.fullyQualifiedName)#if($addNamespaceBackslash)/#end"
##    xmlns:$pkgRef.packageAbbr="$pkgRef.namespace"
#end
    xmlns:xs="$xmlSchemaNamespace"
    xmlns:soap="$wsdlSoapNamespace"
##    xmlns:xsd="$xmlSchemaNamespace"
#if ($service.hasStereotype("WSCustomHeader"))
#set ($serviceHeaderAbbr = $service.findTaggedValue("andromda_header_abbr"))
#set ($serviceHeaderNamespace = $service.findTaggedValue("andromda_header_namespace"))
#set ($serviceHeaderPartName = $service.findTaggedValue("andromda_wsdl_header_partName"))
#set ($serviceHeaderElementName = $service.findTaggedValue("andromda_wsdl_header_element"))
#set ($serviceHeaderXSDlocation = $service.findTaggedValue("andromda_header_XSDlocation"))
#set ($serviceHeaderParamDirection = $service.findTaggedValue("andromda_header_direction"))
#if ($stringUtils.isBlank($serviceHeaderParamDirection))#set ($serviceHeaderParamDirection="IN")#end
    xmlns:$serviceHeaderAbbr="$serviceHeaderNamespace"
#end
#if ($service.hasStereotype("WSSecurity"))
#set ($securityAbbr = $service.findTaggedValue("andromda_security_abbr"))
#if ($stringUtils.isBlank($securityAbbr))#set ($securityAbbr="wsse")#end
#set ($securityNamespace = $service.findTaggedValue("andromda_security_namespace"))
#if ($stringUtils.isBlank($securityNamespace))#set ($securityNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd")#end
#set ($securityPartName = $service.findTaggedValue("andromda_wsdl_security_partName"))
#if ($stringUtils.isBlank($securityPartName))#set ($securityPartName="Security")#end
#set ($securityElementName = $service.findTaggedValue("andromda_wsdl_security_element"))
#if ($stringUtils.isBlank($securityElementName))#set ($securityElementName="Security")#end
#set ($securityXSDlocation = $service.findTaggedValue("andromda_security_XSDlocation"))
#if ($stringUtils.isBlank($securityXSDlocation))#set ($securityXSDlocation="http://wdpr-interface-simulator.wdw.disney.com/oasis-200401-wss-wssecurity-secext-1.0.xsd")#end
#set ($securityParamDirection = $service.findTaggedValue("andromda_security_header_direction"))
#if ($stringUtils.isBlank($securityParamDirection))#set ($securityParamDirection="IN")#end
    xmlns:$securityAbbr="$securityNamespace"
    xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
#end
    xmlns:wsdl="$wsdlNamespace">
##    xmlns:http="http://schemas.xmlsoap.org/wsdl/http#if($addNamespaceBackslash)/#end"
##    xmlns:xformat="http://cxf.apache.org/bindings/xformat">
##    <!-- pkgRefs=$pkgRefs.size() schemaTypes=$schemaTypes.size() -->
    <!-- WSDL Types, with separate interface element schema definitions from wsdl endpoint definition -->
##    <!-- CXF 2.0.x throws an exception when referencing imported relative schemas: must include entire schema definition here -->
    <wsdl:types>
#if($importedXSD)
        <xs:schema>
##<!-- service.package.namespace=$service.package.namespace -->
#foreach ($pkgRef in $exceptionRefs)
            <xs:import namespace="http://$webServiceUtils.reversePackage($pkgRef.fullyQualifiedName)#if($addNamespaceBackslash)/#end"
                schemaLocation="xsd/${webServiceUtils.reversePackage($pkgRef.fullyQualifiedName)}.xsd"/>
#end
#if ($service.hasStereotype("WSCustomHeader"))
#if ($stringUtils.isBlank($serviceHeaderXSDlocation))#set ($serviceHeaderXSDlocation=$serviceHeaderNamespace)#end
            <xs:import namespace="$serviceHeaderNamespace"
                schemaLocation="$serviceHeaderXSDlocation"/>
#end
#if ($service.hasStereotype("WSSecurity"))
#if ($stringUtils.isBlank($securityXSDlocation))#set ($securityXSDlocation=$securityNamespace)#end
            <xs:import namespace="$securityNamespace"
                schemaLocation="$securityXSDlocation"/>
#end
        </xs:schema>
#elseif ($service.hasStereotype("WSCustomHeader") || $service.hasStereotype("WSSecurity"))
        <xs:schema>
#if ($service.hasStereotype("WSCustomHeader"))
#if ($stringUtils.isBlank($serviceHeaderXSDlocation))#set ($serviceHeaderXSDlocation=$serviceHeaderNamespace)#end
            <xs:import namespace="$serviceHeaderNamespace"
                schemaLocation="$serviceHeaderXSDlocation"/>
#end
#if ($service.hasStereotype("WSSecurity"))
#if ($stringUtils.isBlank($securityXSDlocation))#set ($securityXSDlocation=$securityNamespace)#end
            <xs:import namespace="$securityNamespace"
                schemaLocation="$securityXSDlocation"/>
#end
        </xs:schema>
#end
#parse("templates/webservice/jaxws/jaxws-included-xsd.vsl")
    </wsdl:types>

    <!-- Messages - Correspond to service $defaultParameterStyle method parameters -->
## I'm not sure why ns: works instead of impl: for element references, but the wsdl gives an eror if it's not used
#foreach ($operation in $service.allowedOperations)
#if ($operation.visibility.equals("public") && !$operation.rest)
## Bare not possible if any parameters have minOccurs > 1 or default values
#set ($isMany=false)
#foreach ($parameter in $operation.parameters)
#if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
#set ($isMany=true)
#end
#end
#if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED") || $isMany)
#if ($operation.returnTypePresent || $operation.exceptionsPresent)
    <wsdl:message name="${operation.operationName}Response">
        <wsdl:part name="${operation.operationName}Response" element="${service.namespacePrefix}:${operation.operationName}Response"/>
    </wsdl:message>
#end
    <wsdl:message name="${operation.operationName}">
## element name must not have RequestWrapper, otherwise Java is generated as BARE instead of WRAPPED
        <wsdl:part name="${operation.operationName}" element="${service.namespacePrefix}:${operation.operationName}"/>
#if ($service.hasStereotype("WSCustomHeader"))
        <!--wsdl:part name="$serviceHeaderPartName" element="$serviceHeaderAbbr:$serviceHeaderElementName"/-->
#end
#if ($service.hasStereotype("WSSecurity"))
        <!--wsdl:part name="$securityPartName" element="$securityAbbr:$securityElementName"/-->
#end
    </wsdl:message>
#else
## No Request/Response wrappers in message or types
    <wsdl:message name="${operation.operationName}">
#foreach ($parameter in $operation.arguments)
#if ($stringUtils.isBlank($parameter.type.packageName) || $parameter.type.packageName.equals("PrimitiveTypes") || $stringUtils.substring($parameter.type.schemaType, 0, 3).equals("xs:"))
#set ($type=$parameter.type.schemaType)
##        <!-- blank $parameter.type.name type.packageName=$parameter.type.packageName schemaType=$parameter.type.schemaType $parameter.type $parameter.type.fullyQualifiednName-->
#else
#set ($type="${service.namespacePrefix}:$parameter.type.name")
##        <!-- nb $parameter.type.name type.packageName=$parameter.type.packageName schemaType=$parameter.type.schemaType $parameter.type $parameter.type.fullyQualifiednName-->
#end
# Determine if attribute/element is a simple schema type when it starts with xs:
#if ($stringUtils.isNotBlank($parameter.getDocumentation("", 9999, false)))
        <wsdl:part name="$parameter.name" element="$type">
            <wsdl:documentation>
$stringUtils.replaceChars($parameter.getDocumentation("            ", 100, false), "\"'&<>", "")
            </wsdl:documentation>
        </wsdl:part>
#else
        <wsdl:part name="$parameter.name" element="$type"/>
#end
#end
#if ($service.hasStereotype("WSCustomHeader"))
        <wsdl:part name="$serviceHeaderPartName" element="$serviceHeaderAbbr:$serviceHeaderElementName"/>
#end
#if ($service.hasStereotype("WSSecurity"))
        <wsdl:part name="$securityPartName" element="$securityAbbr:$securityElementName"/>
#end
    </wsdl:message>
#if ($operation.returnTypePresent || $operation.exceptionsPresent)
    <wsdl:message name="${operation.operationName}Response">
#if ($stringUtils.isBlank($operation.returnType.packageName) || $parameter.type.packageName.equals("PrimitiveTypes") || $stringUtils.substring($operation.returnType.schemaType, 0, 3).equals("xs:"))
#set ($type=$operation.returnType.schemaType)
##        <!-- blank $operation.returnType.name packageName=$operation.returnType.packageName schemaType=$operation.returnType.schemaType $operation.returnType $operation.returnType.fullyQualifiednName-->
#else
#set ($type="${service.namespacePrefix}:$operation.returnType.name")
##        <!-- nb $operation.returnType.name packageName=$operation.returnType.packageName schemaType=$operation.returnType.schemaType $operation.returnType $operation.returnType.fullyQualifiednName-->
#end
        <wsdl:part element="$type" name="${operation.operationName}Response"/>
    </wsdl:message>
#end
#end
#end
#end
## Assume the first Exception association is the XML WebFault ValueObject
#foreach($exception in $service.allowedOperationExceptions)
#set ($faultName=$exception.name.replace("Exception", "Fault"))
#set ($faultPkg=$webServiceUtils.getPkgAbbr($exception.package))
    <wsdl:message name="$faultName">
        <wsdl:part element="$faultPkg:$faultName" name="$faultName"/>
    </wsdl:message>
#end
#if ($service.hasStereotype("WSCustomHeader"))
    <wsdl:message name="$serviceHeaderPartName">
        <wsdl:part name="$serviceHeaderPartName" element="$serviceHeaderAbbr:$serviceHeaderElementName"/>
    </wsdl:message>
#end
#if ($service.hasStereotype("WSSecurity"))
#if ($stringUtils.isBlank($securityElementName))#set ($securityElementName="Security")#end
    <wsdl:message name="$securityPartName">
        <wsdl:part name="$securityPartName" element="$securityAbbr:$securityElementName"/>
    </wsdl:message>
#end

    <!-- Port Type: Service Endpoint Interface implemented by ${seiSuffix} Endpoint which delegates to WSDelegate -->
    <wsdl:portType name="${service.qName}">
#foreach ($operation in $service.allowedOperations)
#if ($operation.visibility.equals("public") && !$operation.rest)
        <wsdl:operation name="$operation.operationName">
#if ($stringUtils.isNotBlank($operation.getDocumentation("", 9999, false)))
            <wsdl:documentation>
$stringUtils.replaceChars($operation.getDocumentation("                ", 100, false), "\"'&<>", "")
            </wsdl:documentation>
#end
            <wsdl:input name="${operation.operationName}" message="${service.namespacePrefix}:${operation.operationName}"/>
#if ($operation.returnTypePresent || $operation.exceptionsPresent)
            <wsdl:output name="${operation.operationName}Response" message="${service.namespacePrefix}:${operation.operationName}Response"/>
#end
##set($outerCount = $velocityCount)
#foreach($exception in $operation.exceptions)
#set ($faultName=$exception.name.replace("Exception", "Fault"))
##            <wsdl:fault name="${exception.name}" message="$webServiceUtils.getPkgAbbr($exception.package):${exception.name}"/>
            <wsdl:fault name="$faultName" message="${service.namespacePrefix}:$faultName"/>
#end
        </wsdl:operation>
#end
#end
    </wsdl:portType>

#set ($serviceBindingName = "${service.qName}SoapBinding")
    <!-- WSDL Binding - Corresponds to service transport -->
    <wsdl:binding name="$serviceBindingName" type="${service.namespacePrefix}:${service.qName}">
        <soap:binding style="document" transport="$documentStyleTransportNamespace" />
#foreach ($operation in $service.allowedOperations)
#if ($operation.visibility.equals("public") && !$operation.rest)
        <wsdl:operation name="$operation.operationName">
            <soap:operation soapAction="$operation.operationName" style="document" />
            <wsdl:input name="${operation.operationName}">
#if ($service.hasStereotype("WSCustomHeader") && !$serviceHeaderParamDirection.equals("OUT"))
                <soap:header message="impl:$serviceHeaderPartName" part="$serviceHeaderPartName" use="literal"/>
#end
#if ($service.hasStereotype("WSSecurity") && !$securityParamDirection.equals("OUT"))
                <soap:header message="impl:$securityPartName" part="$securityPartName" use="literal"/>
#end
                <soap:body use="literal"/>
            </wsdl:input>
#if ($operation.returnTypePresent || $operation.exceptionsPresent)
            <wsdl:output name="${operation.operationName}Response">
## Return the ServiceContext in the response for debugging and correlation
#if ($service.hasStereotype("WSCustomHeader") && ($serviceHeaderParamDirection.equals("OUT") || $serviceHeaderParamDirection.equals("INOUT")))
                <soap:header message="impl:$serviceHeaderPartName" part="$serviceHeaderPartName" use="literal"/>
#end
#if ($service.hasStereotype("WSSecurity") && ($securityParamDirection.equals("OUT") || $securityParamDirection.equals("INOUT")))
                <soap:header message="impl:$securityPartName" part="$securityPartName" use="literal"/>
#end
                <soap:body use="literal"/>
            </wsdl:output>
##else
##            <wsdl:output>
#end
##set($outerCount = $velocityCount)
#foreach($exception in $operation.exceptions)
#set ($faultName=$exception.name.replace("Exception", "Fault"))
            <wsdl:fault name="$faultName">
                <soap:fault name="$faultName" use="literal"/>
            </wsdl:fault>
#end
        </wsdl:operation>
#end
#end
    </wsdl:binding>

    <!-- Service Definition: Service Endpoint Client Implementation -->
    <wsdl:service name="${service.name}">
#if ($stringUtils.isNotBlank($service.getDocumentation("", 9999, false)))
        <wsdl:documentation>
$stringUtils.replaceChars($service.getDocumentation("            ", 100, false), "\"'&<>", "")
        </wsdl:documentation>
#end
        <wsdl:port name="${service.name}" binding="${service.namespacePrefix}:${serviceBindingName}">
            <soap:address location="http://${webserviceHost}:${webservicePort}/$webContext/$servicesPath/$service.name" />
        </wsdl:port>
    </wsdl:service>

</wsdl:definitions>
#end