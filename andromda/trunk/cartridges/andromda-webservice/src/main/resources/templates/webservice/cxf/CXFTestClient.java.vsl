#if ($umlUtils.shouldOutput($service))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA
 *
 * TEMPLATE:    cxf/CXFTestClient.vsl in andromda-webservices-cartridge
 * MODEL CLASS: ${service.validationName}
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  ${stereotype.name}
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package ${service.packageName}.test;
#end

#if ($service.jaxwsCount>0)
#set ($serviceSEI="${service.fullyQualifiedName}${seiSuffix}")
#else
#set($serviceSEI="${service.fullyQualifiedName}${seiSuffix}Impl")
#end
import $serviceSEI;
import junit.framework.TestSuite;
import org.junit.Test;
import org.junit.runner.JUnitCore;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Remote component interface for the $service.name.
$service.getDocumentation(" * ")
 */
public class ${service.name}WSITCase
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}Test
#else
    extends TestSuite
#end
{
    private Object scenario = null;

    /**
     * Constructor with no parameters
     */
    public ${service.name}WSITCase()
    {
        super();
        this.setName("${service.name}WSITCase");
    }

    /*
     * Constructor with service name
     * @param name Service name to be tested
    public ${service.name}WSITCase(String name)
    {
        super(name);
    }
     */

    /*
     * Constructor with service name and scenario - allows running one scenario data line from spreadsheet
     * @param name Service name to be tested
     * @param scenarioIn the first column of the spreadsheet
    public ${service.name}WSITCase(String name, Object scenarioIn)
    {
        super(name);
        this.setScenario(scenarioIn);
    }
     */

    /**
     * @return the scenario
     */
    public Object getScenario()
    {
        return this.scenario;
    }

    /**
     * @param scenarioIn the scenario to set
     */
    public void setScenario(Object scenarioIn)
    {
        this.scenario = scenarioIn;
    }

    /*
     * JUnit test suite, calls DataDrivenTestSuite with data from ${service.name}.xls
     * @return TestSuite with ServiceName driver
    public static TestSuite suite()
    {
        // Uncomment to create DataDrivenTests with Excel data inputs
        // TestDriverDefinition parameters: dataClass, filename, sheet name. Populates dataClass with spreadsheet contents.
        //TestDriverDefinition driverDef = new TestDriverDefinition(${service.name}TestData.class, "${service.name}.xls", "${service.name}");
        //DataDrivenTestSuite suite = new DataDrivenTestSuite(${service.name}WSITCase.class, driverDef);
        // TODO: post processing of data and suite elements through a delegate class/method
        // Use this for running JUnit 4 tests with JUnit 3 test runner.
        //junit.framework.JUnit4TestAdapter(${service.name}WSITCase.class);
        TestSuite suite = new TestSuite();
#foreach ( $operation in $service.allowedOperations)
#if ($operation.visibility == "public")
        suite.addTest(new ${service.name}WSITCase("${operation.name}"));
#end
#end
        return suite;
    }
     */

    /** Run JUnit tests from the java main command line
     * @param args ignored
     */
    public static void main(String args[])
    {
        JUnitCore.main("${service.packageName}.test.${service.name}WSITCase");
    }

    // ---------------- test methods  ----------------------
#foreach ( $operation in $service.allowedOperations)
## Only expose public methods
#if ($operation.visibility == "public")

#if ($operation.restAtom)
#set ($returnType = "org.apache.abdera.model.Feed")
##set ($operationMany = false)
#elseif (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
##set ($operationMany = true)
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
##set ($operationMany = false)
#end
   /**
    * Invokes the $operation.name service method on ${service.name}.
$operation.getDocumentation("    * ")
    * Operation parameters:
#foreach ( $parameter in $operation.arguments)
    *     $parameter.name $parameter.type.fullyQualifiedName
#end
#if ($operation.restAtom || $operation.returnTypePresent)
    * Operation return:
    *     ${operation.operationName}Response $returnType
#end
#foreach ( $exception in $operation.exceptions)
    * Operation exceptions:
    *     $exception.fullyQualifiedName
#end
    */
    @Test
##    public $returnType test${stringUtils.capitalize(${operation.operationName})}
    public void ${operation.name}()
##    (
##if (!$operation.arguments.empty)
##set ($comma = "")
## If parameter.name not supplied by WebParam, it defaults to arg0, arg1 etc from wsdlgen tools
##foreach ($parameter in $operation.arguments)
##if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
##set ($paramType="java.util.List<$parameter.type.fullyQualifiedName>")
##else
##set ($paramType=$parameter.getterSetterTypeName)
##end
##        ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
##        ${comma} $paramType $parameter.name
##set ($comma = ", ")
##end
##end
##    )
##    // $operation.name $operation.exceptionsPresent $operation.exceptionList $operation.exceptions.size()
##if ($operation.exceptionsPresent)
##        throws $operation.exceptionList
##end
    {
        System.out.println("Starting test: ${operation.name} for " + this.getName());
        // TestCase.setUp and tearDown methods for each individual service method test
#set ($inputType = "${service.packageName}.$stringUtils.capitalize($operation.name)")
        ${inputType}Impl.${operation.name}SetUp();
#if (!$operation.arguments.empty || $service.hasStereotype("WSCustomHeader") || $service.hasStereotype("WSSecurity"))
        // Customize CreateInput method if different default input data is required.
        $inputType ${operation.name}Input = ${inputType}Impl.${operation.name}CreateInput();
#end
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
                new String[]{"cxf-client.xml"});

        $serviceSEI client = ($serviceSEI)context.getBean("${service.name}Client");

##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##set ($returnType = "${operation.packageName}.$stringUtils.capitalize(${operation.operationName})Response")
##set ($requestType = "${operation.packageName}.$stringUtils.capitalize(${operation.operationName})")
##        $requestType ${operation.operationName}RequestWrapper = new ${requestType}();
##foreach ($parameter in $operation.parameters)
##if (!$useArrayWrapper && ($parameter.upper>1 || $parameter.upper==-1))
##set ($paramType=$parameter.getterSetterTypeName)
##else
##set ($paramType=$parameter.type.fullyQualifiedName)
##end
##set ($parmName = "$stringUtils.capitalize($parameter.name)")
##        ${operation.operationName}RequestWrapper.set${parmName}($parameter.name);
##end
##        $returnType ${operation.operationName}Response = client.${operation.operationName}(${operation.operationName}RequestWrapper);
##else
#set ($indent="")
##if (!$operation.exceptions.empty)
#set ($indent="    ")
#if ($operation.restAtom || $operation.returnTypePresent)
#if ($operation.returnType.primitive && !$operation.many && $operation.lower > 0)
        $returnType ${operation.name}Response = ${webServiceUtils.createConstructor($operation.returnParameter, false)};
#else
        $returnType ${operation.name}Response = null;
#end
        try
        {
            ${operation.operationName}Response = client.${operation.name}(
#set ($comma = "")
#foreach ($argument in $operation.arguments)
##      ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
                ${comma} ${operation.name}Input.${argument.getterName}()  // $argument.getterSetterTypeName
#set ($comma = ", ")
#end
#if ($service.hasStereotype("WSCustomHeader"))
#set ($serviceElementName = $service.findTaggedValue("andromda_wsdl_header_element"))
#set ($serviceNamespace = $service.findTaggedValue("andromda_header_namespace"))
#set ($serviceParamDirection = $service.findTaggedValue("andromda_header_direction"))
#if ($stringUtils.isBlank($serviceParamDirection))#set ($serviceParamDirection="IN")#end
#if ($serviceParamDirection.equals("IN") || $serviceParamDirection.equals("INOUT"))
#set ($serviceClassName = "${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName")
                ${comma} new ${serviceClassName}()  // WSCustomHeader serviceElementName
#set ($comma = ",")
#end
#end
#if ($service.hasStereotype("WSSecurity"))
#set ($securityElementName = $service.findTaggedValue("andromda_wsdl_security_element"))
#set ($securityNamespace = $service.findTaggedValue("andromda_security_namespace"))
#set ($securityParamDirection = $service.findTaggedValue("andromda_security_header_direction"))
#if ($stringUtils.isBlank($securityParamDirection))#set ($securityParamDirection="IN")#end
#if ($securityParamDirection.equals("IN") || $securityParamDirection.equals("INOUT"))
#set ($securityClassName = "${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName")
                ${comma} new ${securityClassName}()  // WSSecurity securityElementName
#end
#end
#if ($service.hasStereotype("WSCustomHeader"))
#if ($serviceParamDirection.equals("OUT") || $serviceParamDirection.equals("INOUT"))
#set ($serviceClassName = "javax.xml.ws.Holder<${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName>")
                ${comma} new ${serviceClassName}()  // WSCustomHeader serviceElementName
#set ($comma = ",")
#end
#end
#if ($service.hasStereotype("WSSecurity"))
#if ($securityParamDirection.equals("OUT") || $securityParamDirection.equals("INOUT"))
#set ($securityClassName = "javax.xml.ws.Holder<${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName>")
                ${comma} new ${securityClassName}()  // WSSecurity securityElementName
#end
#end
            );
#if ($operation.returnType.primitive)
            System.out.println(" Result = " + ${operation.operationName}Response);
#else
            if (${operation.operationName}Response==null)
            {
                System.out.println("${operation.operationName}Response Result was valid and null");
            }
            else
            {
                System.out.println(" Result = " + ${operation.operationName}Response.toString());
            }
#end
#else
        try
        {
            client.${operation.name}(
#set ($comma = "")
#foreach ($argument in $operation.arguments)
##      ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
                ${comma} ${operation.name}Input.${argument.getterName}()  // $argument.getterSetterTypeName
#set ($comma = ", ")
#end
#if ($service.hasStereotype("WSCustomHeader") && ($serviceParamDirection.equals("IN") || $serviceParamDirection.equals("INOUT")))
#set ($serviceClassName = "${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName")
                ${comma} new ${serviceClassName}()  // WSCustomHeader serviceElementName
#set ($comma = ",")
#end
#if ($service.hasStereotype("WSSecurity") && ($securityParamDirection.equals("IN") || $securityParamDirection.equals("INOUT")))
#set ($securityClassName = "${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName")
                ${comma} new ${securityClassName}()  // WSSecurity securityElementName
#end
#if ($service.hasStereotype("WSCustomHeader") && ($serviceParamDirection.equals("OUT") || $serviceParamDirection.equals("INOUT")))
#set ($serviceClassName = "javax.xml.ws.Holder<${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName>")
                ${comma} new ${serviceClassName}()  // WSCustomHeader serviceElementName
#set ($comma = ",")
#end
#if ($service.hasStereotype("WSSecurity") && ($securityParamDirection.equals("OUT") || $securityParamDirection.equals("INOUT")))
#set ($securityClassName = "javax.xml.ws.Holder<${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName>")
                ${comma} new ${securityClassName}()  // WSSecurity securityElementName
#end
                );
#end
##elseif ($operation.restAtom || $operation.returnTypePresent)
##        $returnType ${operation.operationName}Response = client.${operation.name}(${operation.argumentNames});
##end
##else
##        client.${operation.name}(${operation.argumentNames});
##end
##end
##if ($defaultParameterStyle.equalsIgnoreCase("WRAPPED"))
##        return ${operation.operationName}Response.get$stringUtils.capitalize(${operation.operationName})Response();
##else
#foreach ($exception in $operation.exceptions)
        }
        catch ($exception.fullyQualifiedName ex)
        {
            // TODO Implement test which causes Exception to occur, and expect that Exception
            System.out.println("${service.name} client.${operation.name}" + " threw $exception.fullyQualifiedName " + ex);
#end
        }
        catch (Exception ex)
        {
            System.out.println("${service.name} client.${operation.name}" + " threw exception " + ex);
#if ($operation.exceptions.empty)
            throw new junit.framework.AssertionFailedError(ex.toString());
#end
        }
        ${inputType}Impl.${operation.name}TearDown();
##if ($operation.restAtom || $operation.returnTypePresent)
##        return ${operation.operationName}Response;
##end
##end
        System.out.println("Finished test for ${service.name}.${operation.name}(${operation.argumentNames})");
    }
#end
#end

    /**
     * JUnit test data class, used by DataDrivenTestSuite in suite()
     */
    public static class ${service.name}TestData
    {
        // TODO: Add test data fields here (populated by ${service.name}.xls spreadsheet
        // TODO: Recursively list every primitive parameter in entire operation parameter hierarchy
#foreach ($operation in $service.allowedOperations)
#foreach ($parameter in $operation.arguments)

        @SuppressWarnings("unused")
        private $parameter.type.fullyQualifiedName ${operation.name}$stringUtils.capitalize(${parameter.name});
        /**
         * Data value for ${parameter.name} ${operation.name} on used by DataDrivenTestSuite in suite().
         * ${operation.name}${parameter.name} must be the column name of the parameter in the spreadsheet
         * @param value $parameter.type.name to be populated manually
         */
        public void set$stringUtils.capitalize(${operation.name})$stringUtils.capitalize(${parameter.name})($parameter.type.fullyQualifiedName value)
        {
            this.${operation.name}$stringUtils.capitalize(${parameter.name}) = value;
        }
#end
#end
    }
}
#end