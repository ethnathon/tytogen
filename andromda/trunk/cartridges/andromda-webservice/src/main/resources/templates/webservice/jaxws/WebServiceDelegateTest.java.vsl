#if ($umlUtils.shouldOutput($service))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    jaxws/WebServiceDelegateTest.vsl in andromda-webservices-cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  ${constraint.name}: #if ($constraint.isInvariant())Invariant #end#if ($constraint.isPostCondition())PostCondition #end#if ($constraint.isPreCondition())PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import junit.framework.TestCase;
import junit.textui.TestRunner;

/**
 * WebService Service Delegate Test for the $service.name service.
$service.getDocumentation(" * ")
 */

public class ${service.name}WSDelegateTest extends TestCase
{
    /**
     * Constructor
     * @param name test case name
     */
    public ${service.name}WSDelegateTest(String name)
    {
        super(name);
    }

    /**
     * @see junit.framework.TestCase#setUp()
     */
#if ($enableAnnotations)
    @Override
#end
    protected void setUp() throws Exception
    {
        super.setUp();
    }

    /**
     * @see junit.framework.TestCase#tearDown()
     */
#if ($enableAnnotations)
    @Override
#end
    protected void tearDown() throws Exception
    {
        super.tearDown();
    }

#foreach ( $operation in $service.allowedOperations)
#if ($operation.visibility.equals("public") || $operation.visibility.equals(""))
    /**
#set ($pound="#")
     * Test method for {@link ${service.fullyQualifiedName}WSDelegate$pound${service.name}WSDelegate()}.
#foreach ($constraint in $operation.constraints)
     * CONSTRAINT:  ${constraint.name}: #if ($constraint.isInvariant())Invariant #end#if ($constraint.isPostCondition())PostCondition #end#if ($constraint.isPreCondition())PreCondition #end ${constraint.body}
#end
     */
    public void test${service.name}WSDelegate$stringUtils.capitalize($operation.name)()
    {
        // TestCase.setUp and tearDown methods for each individual service method test
#set ($inputType = "${service.packageName}.$stringUtils.capitalize($operation.name)")
        ${inputType}Impl.${operation.name}SetUp();
#if (!$operation.arguments.empty)
        // Customize CreateInput method if different default input data is required.
        $inputType ${operation.name}Input = ${inputType}Impl.${operation.name}CreateInput();
#end
        ${service.name}WSDelegate delegate = new ${service.name}WSDelegate();
        System.out.println("Invoking ${service.name}WSDelegate.${operation.name}#if ($operation.arguments.empty)"#else with " + ${operation.name}Input#end);
#if (!$operation.exceptions.empty)
        try {
#end
#if ($operation.returnTypePresent)
        ${operation.returnType.fullyQualifiedName} rtn =
#end
            delegate.${operation.name}(
#set ($comma = "")
#foreach ($argument in $operation.arguments)
##      ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
            ${comma} ${operation.name}Input.${argument.getterName}()  // $argument.getterSetterTypeName
#set ($comma = ", ")
#end
        );
        System.out.println("${service.name}WSDelegate.${operation.name}" + " returned " + rtn.toString());
#if (!$operation.exceptions.empty)
        } catch (Exception ex) {
            System.out.println("${service.name}WSDelegate.${operation.name}" + " threw exception " + ex);
            fail(ex.toString());
        }
#end
        ${inputType}Impl.${operation.name}TearDown();
    }

#end
#end
    /**
     * main() method to run the test with the textual test runner.
     * @param args Not used
     */
    public static void main (String[] args)
    {
        TestRunner.run(${service.name}WSDelegateTest.class);
    }
}

#end
