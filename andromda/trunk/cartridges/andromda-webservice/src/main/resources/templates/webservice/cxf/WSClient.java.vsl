#if ($umlUtils.shouldOutput($service))
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    cxf/WSClient.vsl in andromda-webservices-cartridge
 * MODEL CLASS: ${service.validationName}
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  ${stereotype.name}
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package ${service.packageName}.test;
#end

import ${service.fullyQualifiedName}${seiSuffix};
import ${service.fullyQualifiedName}${seiSuffix}Client;
import java.net.URL;
import javax.xml.namespace.QName;
#if ($service.restCount>0)
import java.io.IOException;
import java.io.InputStream;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.core.Response;
import org.apache.cxf.helpers.IOUtils;
import org.apache.cxf.jaxrs.client.WebClient;
#end
import junit.framework.TestCase;
import junit.textui.TestRunner;

/**
 * Client test for the $service.name web service. Modified from CXF generated test client.
$service.getDocumentation(" * ")
 */
public final class ${service.name}_WSClient extends TestCase
{
    private static final QName SERVICE_NAME = new QName("http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end", "${service.name}");
    private static URL wsdlURL = null;

    /**
     * Public constructor for JUnit
     */
    public ${service.name}_WSClient()
    {
        // Documented empty constructor - avoid compiler warning
    }

    /**
     * @param name
     */
    public ${service.name}_WSClient(String name)
    {
        super(name);
    }

    /**
     * @see junit.framework.TestCase#setUp()
     */
    @Override
    protected void setUp() throws Exception
    {
        super.setUp();
        //if (args.length == 0)
        //{
            wsdlURL = ${service.name}${seiSuffix}Client.WSDL_LOCATION;
        //}
        /*else
        {
            File wsdlFile = new File(args[0]);
            try
            {
                if (wsdlFile.exists())
                {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else
                {
                    wsdlURL = new URL(args[0]);
                }
            }
            catch (MalformedURLException e)
            {
                e.printStackTrace();
            }
        } */
    }

    /**
     * @see junit.framework.TestCase#tearDown()
     */
    @Override
    protected void tearDown() throws Exception
    {
        super.tearDown();
    }

    /**
     * @param args
     * @throws Exception
     */
    public static void main(String args[]) throws Exception
    {
        TestRunner.run(${service.name}_WSClient.class);

        /*
#foreach ( $operation in $service.allowedOperations)
#if ($operation.visibility == "public")
#if ($operation.rest)
#set ($returnType = "String")
#elseif (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
#end

       // #if ($operation.restAtom) String _${operation.operationName}__return =#elseif ($operation.returnTypePresent) $returnType _${operation.operationName}__return =#else #end
           test${stringUtils.capitalize(${operation.operationName})}(port);
#end
#end
       */
    }
#foreach ( $operation in $service.allowedOperations)
#if ($operation.visibility.equals("public") || $operation.visibility.equals("package"))
#set ($className = $stringUtils.capitalize(${operation.name}))
##set ($arguments = $operation.returnType.fullyQualifiedName)
#if ($operation.rest)
#set ($returnType = "String")
#elseif (!$useArrayWrapper && ($operation.upper>1 || $operation.upper==-1))
#set ($returnType = "java.util.List<$operation.returnType.fullyQualifiedName>")
#else
#set ($returnType = $operation.getterSetterReturnTypeName)
#end
    /**
     * Test ${service.name} Service ${operation.operationName}
##if ($operation.restAtom)
##set ($returnType = "String")
##     * @return _${operation.name}__return String
##else
##     * @param port ${service.name}${seiSuffix} Endpoint Interface
##if ($operation.returnTypePresent || $operation.rest)
##     * @return _${operation.name}__return $returnType
##end
##end
#foreach($exception in $operation.exceptions)
     * @throws ${exception.fullyQualifiedName} $exception.getDocumentation("")
#end
     */
    public void test${stringUtils.capitalize(${operation.operationName})}()
#if ($operation.exceptionsPresent)
    throws $operation.exceptionList
#end
    {
##        $arguments = new ${operation.packageName}.$stringUtils.capitalize(${operation.operationName})RequestWrapper();
#if (!$operation.arguments.empty)
#set ($inputType = "${service.packageName}.$stringUtils.capitalize($operation.operationName)")
        $inputType ${operation.operationName}Input = ${inputType}Impl.${operation.name}CreateInput();
#end
        System.out.println("Invoking ${operation.name} on ${service.name}#if(!$operation.parameters.empty) with#end"
#foreach($argument in $operation.arguments)
            + " $argument.name=" + ${operation.operationName}Input.${argument.getterName}()
#if (!$webServiceUtils.isSimpleType($argument))
#set ($complexParam = $argument)
#end
#end
#if ($service.hasStereotype("WSCustomHeader"))
#set ($serviceElementName = $service.findTaggedValue("andromda_wsdl_header_element"))
#set ($serviceNamespace = $service.findTaggedValue("andromda_header_namespace"))
#set ($serviceClassName = "${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName")
            + " WSCustomHeader=" + new ${serviceClassName}()  // WSCustomHeader serviceElementName
#end
#if ($service.hasStereotype("WSSecurity"))
#set ($securityElementName = $service.findTaggedValue("andromda_wsdl_security_element"))
#set ($securityNamespace = $service.findTaggedValue("andromda_security_namespace"))
#set ($securityClassName = "${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName")
            + " WSSecurity=" + new ${securityClassName}()  // WSSecurity securityElementName
#end        );
#set ($indent="")
#if ($operation.rest)
        Response response = null;
        InputStream is = null;
        int length = 0;
        String _${operation.operationName}__return = "Failed to read output from result";
#set ($reqPath = "${operation.restTestPath}#if($addNamespaceBackslash)/#end")
##set ($reqPath = "${service.restPath}${operation.restPath}#if($addNamespaceBackslash)/#end")
#set ($reqPath = $reqPath.replace('"','').replace("//",'/'))
#if ($reqPath.indexOf('{')>0)
        // TODO Fix request URL to contain actual data instead of {} http://${webserviceHost}:${webservicePort}/$webContext/${servicesPath}$reqPath
#end
        String restURL = "http://${webserviceHost}:${webservicePort}/$webContext/${servicesPath}$reqPath";
        System.out.println("Creating REST Webclient for URL " + restURL);
        try
        {
            WebClient client = WebClient.create(restURL);
## Assume only a single complex parameter on post, otherwise method needs to be wrapped
#if (!$operation.arguments.empty)
#set ($complexParam = $operation.arguments.get(0))
#if (!$webServiceUtils.isSimpleType($complexParam))
            javax.xml.bind.JAXBContext ctx = javax.xml.bind.JAXBContext.newInstance(${complexParam.type.fullyQualifiedName}.class);
            java.io.StringWriter writer = new java.io.StringWriter();
            ctx.createMarshaller().marshal(${operation.operationName}Input.get${stringUtils.capitalize($complexParam.name)}(), writer);
            System.out.println(writer.toString());
            response = client.path("").type($operation.restProduces).accept($operation.restProduces).post(writer.toString());
#else
            response = client.path("").type($operation.restProduces).accept($operation.restProduces).get();
#end
#else
            response = client.path("").get();
#end
            is = (InputStream)response.getEntity();
            length = is.available();
            _${operation.operationName}__return = IOUtils.readStringFromStream(is);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (Exception ex)
        {
            try
            {
                if (is != null)
                {
                    is.close();
                }
            }
            catch (IOException ignore)
            {
                // Ignore close exception - already closed
            }
        }
        if (response != null)
        {
#if ($operation.returnTypePresent)
            if (response.getStatus()==HttpServletResponse.SC_OK && length>0)
#else
            if (response.getStatus()==HttpServletResponse.SC_NO_CONTENT || response.getStatus()==HttpServletResponse.SC_CREATED)
#end
            {
                System.out.println("SUCCESS ${operation.name}.result=" + response.getStatus() + " ${operation.name}.size=" + length);
            }
            else
            {
                System.out.println("FAILURE ${operation.name}.result=" + response.getStatus() + " ${operation.name}.size=" + length);
            }
        }
        else
        {
            System.out.println("FAILURE Received null response");
        }
        assertNotNull(response);
#if ($operation.returnTypePresent)
        assertTrue(length>0);
#else
        assertTrue(response!=null && (response.getStatus()==HttpServletResponse.SC_NO_CONTENT || response.getStatus()==HttpServletResponse.SC_CREATED));
#end
#else
        ${service.name}${seiSuffix}Client ss = new ${service.name}${seiSuffix}Client(wsdlURL, SERVICE_NAME);
## CXF removes underscores from the generated service getXXX method.
        ${service.name}${seiSuffix} port = ss.get${service.name.replace("_","")}();
#if (!$operation.exceptions.empty)
#set ($indent="    ")
        try {
#end
$indent       #if ($operation.returnTypePresent) $returnType _${operation.name}__return =#end port.${operation.name}(
#set ($comma = "")
#foreach ($argument in $operation.arguments)
##$indent      ${comma}@WebParam(name="$parameter.name"#if ($stringUtils.isNotBlank($parameter.type.packageName)), targetNamespace="http://$parameter.type.packageName#if($addNamespaceBackslash)/#end"#end) $parameter.type.fullyQualifiedName $parameter.name
$indent            ${comma} ${operation.operationName}Input.${argument.getterName}()
#set ($comma = ", ")
#end
#if ($service.hasStereotype("WSCustomHeader"))
#set ($serviceElementName = $service.findTaggedValue("andromda_wsdl_header_element"))
#set ($serviceNamespace = $service.findTaggedValue("andromda_header_namespace"))
#set ($serviceClassName = "${webServiceUtils.getPackageName($serviceNamespace)}.$serviceElementName")
               ${comma} new ${serviceClassName}()  // WSCustomHeader serviceElementName
#set ($comma = ",")
#end
#if ($service.hasStereotype("WSSecurity"))
#set ($securityElementName = $service.findTaggedValue("andromda_wsdl_security_element"))
#set ($securityNamespace = $service.findTaggedValue("andromda_security_namespace"))
#set ($securityClassName = "${webServiceUtils.getPackageName($securityNamespace)}.$securityElementName")
               ${comma} new ${securityClassName}()  // WSSecurity securityElementName
#end$indent        );
#end
#if ($operation.returnTypePresent || $operation.rest)
$indent        System.out.println("${operation.name}.result=" + _${operation.name}__return);
$indent        // return _${operation.name}__return;
#else
$indent        System.out.println("${operation.name} with no result=");
#end
#if (!$operation.exceptions.empty)
        }
        catch (Exception ex)
        {
            System.out.println("${service.name} port.${operation.name}" + " threw exception " + ex);
            throw new junit.framework.AssertionFailedError(ex.toString());
        }
#end
    }

#end
#end
    /**
     * JUnit test data class, used by DataDrivenTestSuite in suite()
     */
    public static class ${service.name}TestData
    {
        // TODO: Add test data fields here (populated by ${service.name}.xls spreadsheet
        // TODO: Recursively list every primitive parameter in entire operation parameter hierarchy
#foreach ( $operation in $service.allowedOperations)
#if ($operation.visibility == "public")
#foreach ( $parameter in $operation.arguments)
#set ($parmName="${operation.name}$stringUtils.capitalize(${parameter.name})")
        @SuppressWarnings("unused")
        private $parameter.type.fullyQualifiedName $parmName;
        /**
         * Data value for ${parameter.name} ${operation.name} on used by DataDrivenTestSuite in suite().
         * ${operation.name}${parameter.name} must be the column name of the parameter in the spreadsheet
         * @param value $parameter.type.name to be populated manually
         */
        public void set$stringUtils.capitalize($parmName)($parameter.type.fullyQualifiedName value)
        {
            this.$parmName = value;
        }
#end
#end
#end
    }
}
#end