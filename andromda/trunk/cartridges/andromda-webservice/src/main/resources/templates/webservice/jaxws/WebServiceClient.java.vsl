#if ($umlUtils.shouldOutput($service) && $service.jaxwsCount>0)
// license-header java merge-point
/* Autogenerated on $webServiceUtils.date by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    jaxws/WebServiceClient.vsl in andromda-webservice cartridge
 * MODEL CLASS: $service.validationName
#foreach ($stereotype in $service.stereotypes)
 * STEREOTYPE:  $stereotype.name
#end
#foreach ($constraint in $service.constraints)
 * CONSTRAINT:  $constraint.name: #if ($constraint.invariant)Invariant #end#if ($constraint.postCondition)PostCondition #end#if ($constraint.preCondition)PreCondition #end $constraint.body
#end
*/
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * WebService Service Client for the $service.name service endpoint interface (${service.name}${seiSuffix}).
$service.getDocumentation(" * ")
 */

#set ($targetNamespace="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end")
#set ($wsdlLocation="http://${webserviceHost}:${webservicePort}/$webContext/$servicesPath/${service.qName}?wsdl")
@WebServiceClient(name = "${service.name}",
                  wsdlLocation = "$wsdlLocation",
                  targetNamespace = "$targetNamespace")
##@WebService(serviceName="${service.name}",
##            portName = "${service.name}",
##            endpointInterface="${service.fullyQualifiedName}${seiSuffix}")
##            //, targetNamespace="http://$webServiceUtils.reversePackage($service.packageName)#if($addNamespaceBackslash)/#end"
##            //, wsdlLocation = "WEB-INF/wsdl/${service.name}.wsdl")
public class ${service.name}${seiSuffix}Client extends Service
#if ($service.generalization)
    , ${service.generalization.fullyQualifiedName}${seiSuffix}Client
#end
{
    private static final Logger LOG = LoggerFactory.getLogger(${service.name}${seiSuffix}Client.class);
    /** WSDL location */
    public static final URL WSDL_LOCATION;
    /** Service QName @see {@link javax.xml.namespace.QName} */
    public static final QName SERVICE = new QName("$targetNamespace", "${service.name}");
    /** Endpoint Service QName @see {@link javax.xml.namespace.QName} */
    public static final QName ${service.name} = new QName("$targetNamespace", "${service.name}");
    static
    {
        URL url = null;
        try
        {
            url = new URL("$wsdlLocation");
        }
        catch (MalformedURLException e)
        {
            LOG.error("Can not initialize the default wsdl from $wsdlLocation", e);
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    /**
     * @param wsdlLocation wsdl URL
     */
    public ${service.name}${seiSuffix}Client(URL wsdlLocation)
    {
        super(wsdlLocation, SERVICE);
    }

    /**
     * @param wsdlLocation wsdl URL
     * @param serviceName javax.xml.namespace.QName
     * @see javax.xml.ws.Service#Service(URL, QName)
     */
    public ${service.name}${seiSuffix}Client(URL wsdlLocation, QName serviceName)
    {
        super(wsdlLocation, serviceName);
    }

    /**
     * @see javax.xml.ws.Service#Service(URL, QName)
     */
    public ${service.name}${seiSuffix}Client()
    {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     *
     * @return ${service.name}${seiSuffix}
     */
    @WebEndpoint(name = "${service.name}")
    public ${service.name}${seiSuffix} get${service.name}()
    {
        return super.getPort(${service.name}, ${service.name}${seiSuffix}.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.
     *         Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ${service.name}${seiSuffix}
     */
    @WebEndpoint(name = "${service.name}")
    public ${service.name}${seiSuffix} get${service.name}(WebServiceFeature... features)
    {
        return super.getPort(${service.name}, ${service.name}${seiSuffix}.class, features);
    }
}

#end
